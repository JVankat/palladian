package tud.iir.news;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.apache.log4j.Logger;
import org.apache.xml.serialize.OutputFormat;
import org.apache.xml.serialize.XMLSerializer;
import org.w3c.dom.Comment;
import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

import tud.iir.helper.CollectionHelper;
import tud.iir.helper.DateHelper;

public class OPMLHelper {

    private static final Logger logger = Logger.getLogger(OPMLHelper.class);

    /**
     * Read feeds from an OPML file.
     * 
     * @param file
     * @return
     */
    public static List<Feed> readOPMLFile(File file) {
        final List<Feed> feeds = new LinkedList<Feed>();
        try {
            SAXParser parser = SAXParserFactory.newInstance().newSAXParser();
            parser.parse(file, new DefaultHandler() {
                @Override
                public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
                    if (qName.equals("outline")) {
                        Feed currentFeed = new Feed();
                        currentFeed.setTitle(attributes.getValue("text"));
                        currentFeed.setFeedUrl(attributes.getValue("xmlUrl"));
                        currentFeed.setSiteUrl(attributes.getValue("htmlUrl"));
                        feeds.add(currentFeed);
                    }
                }
            });
        } catch (ParserConfigurationException e) {
            logger.error("readOPMLFile", e);
        } catch (SAXException e) {
            logger.error("readOPMLFile", e);
        } catch (IOException e) {
            logger.error("readOPMLFile", e);
        }
        return feeds;
    }

    /**
     * Write list of feeds to OPML file.
     * 
     * @param feeds
     * @param file
     */
    public static void writeOPMLFile(Collection<Feed> feeds, File file) {
        try {
            DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
            Document document = builder.newDocument();

            Comment info = document.createComment("generated by OPMLHelper on " + DateHelper.getCurrentDatetime());
            document.appendChild(info);

            Element opml = document.createElement("opml");
            document.appendChild(opml);

            Element body = document.createElement("body");
            opml.appendChild(body);

            for (Feed feed : feeds) {
                Element outline = document.createElement("outline");
                outline.setAttribute("xmlUrl", feed.getFeedUrl());
                if (feed.getTitle() != null) {
                    outline.setAttribute("text", feed.getTitle());
                }
                if (feed.getSiteUrl() != null) {
                    outline.setAttribute("htmlUrl", feed.getSiteUrl());
                }
                body.appendChild(outline);
            }

            OutputFormat format = new OutputFormat(document);
            format.setIndenting(true);
            FileOutputStream fileOutputStream = new FileOutputStream(file);
            XMLSerializer serializer = new XMLSerializer(fileOutputStream, format);
            serializer.serialize(document);
        } catch (DOMException e) {
            logger.error("writeOPMLFile", e);
        } catch (ParserConfigurationException e) {
            logger.error("writeOPMLFile", e);
        } catch (FileNotFoundException e) {
            logger.error("writeOPMLFile", e);
        } catch (IOException e) {
            logger.error("writeOPMLFile", e);
        }
    }

    public static void writeOPMLFileFromStrings(Collection<String> feedUrls, File file) {
        List<Feed> feeds = new LinkedList<Feed>();
        for (String feedUrl : feedUrls) {
            feeds.add(new Feed(feedUrl));
        }
        writeOPMLFile(feeds, file);
    }

    public static void main(String[] args) {

        List<Feed> feeds = readOPMLFile(new File("MySubscriptions.opml"));
        CollectionHelper.print(feeds);

        writeOPMLFile(feeds, new File("test.opml"));
    }

}
