#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version 5.2 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="arial",fontsize=10,labelfontname="arial",labelfontsize=10];
	node [fontname="arial",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// tud.iir.helper.XPathHelper
	c4185 [label=<<table title="tud.iir.helper.XPathHelper" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./XPathHelper.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> XPathHelper </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + hasXMLNS(document : Document) : boolean </td></tr>
<tr><td align="left" balign="left"> + addNameSpaceToXPath(document : Document, xPath : String) : String </td></tr>
<tr><td align="left" balign="left"> + addNameSpaceToXPath(xPath : String) : String </td></tr>
<tr><td align="left" balign="left"> + getNodesNS(document : Document, xPath : String) : List&lt;Node&gt; </td></tr>
<tr><td align="left" balign="left"> + getNodesNS(node : Node, xPath : String) : List&lt;Node&gt; </td></tr>
<tr><td align="left" balign="left"> + getChildNodeNS(node : Node, xPath : String) : Node </td></tr>
<tr><td align="left" balign="left"> + getNodeByID(document : Document, id : String) : Node </td></tr>
<tr><td align="left" balign="left"> + getChildNode(node : Node, xPath : String) : Node </td></tr>
<tr><td align="left" balign="left"> + getChildNodes(node : Node, xPath : String) : List&lt;Node&gt; </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
	// tud.iir.helper.WordNet
	c4186 [label=<<table title="tud.iir.helper.WordNet" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./WordNet.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> WordNet </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getSynonyms(word : String, number : int) : String[] </td></tr>
<tr><td align="left" balign="left"> + getSynonyms(word : String, number : int, includeBaseWord : boolean) : String[] </td></tr>
<tr><td align="left" balign="left"> + main(args : String[]) </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
	// tud.iir.helper.TreeNode
	c4187 [label=<<table title="tud.iir.helper.TreeNode" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./TreeNode.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> TreeNode </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - serialVersionUID : long </td></tr>
<tr><td align="left" balign="left"> - label : String </td></tr>
<tr><td align="left" balign="left"> - children : HashMap&lt;String, TreeNode&gt; </td></tr>
<tr><td align="left" balign="left"> - value : Object </td></tr>
<tr><td align="left" balign="left"> - weight : double </td></tr>
<tr><td align="left" balign="left"> - parent : TreeNode </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + addNode(tn : TreeNode) : boolean </td></tr>
<tr><td align="left" balign="left"> + getLabel() : String </td></tr>
<tr><td align="left" balign="left"> + setLabel(label : String) </td></tr>
<tr><td align="left" balign="left"> + getNode(label : String) : TreeNode </td></tr>
<tr><td align="left" balign="left"> + getChildren() : HashMap&lt;String, TreeNode&gt; </td></tr>
<tr><td align="left" balign="left"> + setChildren(children : HashMap&lt;String, TreeNode&gt;) </td></tr>
<tr><td align="left" balign="left"> + getDescendants() : HashSet&lt;TreeNode&gt; </td></tr>
<tr><td align="left" balign="left"> + resetWeights() </td></tr>
<tr><td align="left" balign="left"> + getParent() : TreeNode </td></tr>
<tr><td align="left" balign="left"> + setParent(parent : TreeNode) </td></tr>
<tr><td align="left" balign="left"> + getRootPath() : ArrayList&lt;TreeNode&gt; </td></tr>
<tr><td align="left" balign="left"> + getLeafPath() : ArrayList&lt;TreeNode&gt; </td></tr>
<tr><td align="left" balign="left"> + getFullPath() : ArrayList&lt;TreeNode&gt; </td></tr>
<tr><td align="left" balign="left"> + getValue() : Object </td></tr>
<tr><td align="left" balign="left"> + setValue(value : Object) </td></tr>
<tr><td align="left" balign="left"> + getWeight() : double </td></tr>
<tr><td align="left" balign="left"> + setWeight(weight : double) </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + main(args : String[]) </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
	// tud.iir.helper.ThreadHelper
	c4188 [label=<<table title="tud.iir.helper.ThreadHelper" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./ThreadHelper.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ThreadHelper </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + sleep(milliseconds : int) </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
	// tud.iir.helper.StringOutputStream
	c4189 [label=<<table title="tud.iir.helper.StringOutputStream" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./StringOutputStream.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> StringOutputStream </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - string : StringBuilder </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + write(b : int) </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
	// tud.iir.helper.StringInputStream
	c4190 [label=<<table title="tud.iir.helper.StringInputStream" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./StringInputStream.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> StringInputStream </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - string : StringBuilder </td></tr>
<tr><td align="left" balign="left"> ~ currentIndex : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + write(b : int) </td></tr>
<tr><td align="left" balign="left"> + read() : int </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
	// tud.iir.helper.StringHelper
	c4191 [label=<<table title="tud.iir.helper.StringHelper" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./StringHelper.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> StringHelper </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - BRACKETS : char[] </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + makeSafeName(name : String) : String </td></tr>
<tr><td align="left" balign="left"> + makeCamelCase(name : String, uppercaseFirst : boolean, toSingular : boolean) : String </td></tr>
<tr><td align="left" balign="left"> + makeCamelCase(name : String, uppercaseFirst : boolean) : String </td></tr>
<tr><td align="left" balign="left"> + upperCaseFirstLetter(term : String) : String </td></tr>
<tr><td align="left" balign="left"> + lowerCaseFirstLetter(term : String) : String </td></tr>
<tr><td align="left" balign="left"> + calculateNGrams(string : String, n : int) : HashSet&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + removeNumbering(numberedText : String) : String </td></tr>
<tr><td align="left" balign="left"> + calculateAllNGrams(string : String, n1 : int, n2 : int) : HashSet&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + makeViewName(name : String) : String </td></tr>
<tr><td align="left" balign="left"> + containsProperNoun(searchString : String) : boolean </td></tr>
<tr><td align="left" balign="left"> + containsNumber(searchString : String) : boolean </td></tr>
<tr><td align="left" balign="left"> + wordToSingular(plural : String) : String </td></tr>
<tr><td align="left" balign="left"> + wordToPlural(singular : String) : String </td></tr>
<tr><td align="left" balign="left"> + removeStopWords(string : String) : String </td></tr>
<tr><td align="left" balign="left"> + removeHTMLTags(htmlText : String, stripTags : boolean, stripComments : boolean, stripJSAndCSS : boolean, joinTagsAndRemoveNewlines : boolean) : String </td></tr>
<tr><td align="left" balign="left"> + removeSpecialChars(string : String) : String </td></tr>
<tr><td align="left" balign="left"> + countTags(htmlText : String) : int </td></tr>
<tr><td align="left" balign="left"> + countTags(htmlText : String, distinct : boolean) : int </td></tr>
<tr><td align="left" balign="left"> + removeBrackets(string : String) : String </td></tr>
<tr><td align="left" balign="left"> + escapeForRegularExpression(string : String) : String </td></tr>
<tr><td align="left" balign="left"> + isBracket(character : char) : boolean </td></tr>
<tr><td align="left" balign="left"> + isNumber(ch : Character) : boolean </td></tr>
<tr><td align="left" balign="left"> + isNumber(string : String) : boolean </td></tr>
<tr><td align="left" balign="left"> + isNumericExpression(string : String) : boolean </td></tr>
<tr><td align="left" balign="left"> + isTimeExpression(string : String) : boolean </td></tr>
<tr><td align="left" balign="left"> + isCompletelyUppercase(string : String) : boolean </td></tr>
<tr><td align="left" balign="left"> + letterNumberCount(string : String) : int </td></tr>
<tr><td align="left" balign="left"> + capitalizedWordCount(string : String) : int </td></tr>
<tr><td align="left" balign="left"> + isVowel(character : Character) : boolean </td></tr>
<tr><td align="left" balign="left"> + getPhraseFromBeginningOfSentence(string : String) : String </td></tr>
<tr><td align="left" balign="left"> + getPhraseToEndOfSentence(string : String) : String </td></tr>
<tr><td align="left" balign="left"> + getSentence(string : String, position : int) : String </td></tr>
<tr><td align="left" balign="left"> + trim(string : String) : String </td></tr>
<tr><td align="left" balign="left"> + trim(string : String, keepCharacters : String) : String </td></tr>
<tr><td align="left" balign="left"> + trim(strings : HashSet&lt;String&gt;) : HashSet&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + makeContinuousText(text : String) : String </td></tr>
<tr><td align="left" balign="left"> + unescapeHTMLEntities(string : String) : String </td></tr>
<tr><td align="left" balign="left"> + putArticleInFront(string : String) : String </td></tr>
<tr><td align="left" balign="left"> + countWords(string : String) : int </td></tr>
<tr><td align="left" balign="left"> + calculateSimilarity(string1 : String, string2 : String) : double </td></tr>
<tr><td align="left" balign="left"> + calculateSimilarity(string1 : String, string2 : String, caseSensitive : boolean) : double </td></tr>
<tr><td align="left" balign="left"> + getLongestCommonString(string1 : String, string2 : String, caseSensitive : boolean, shiftString : boolean) : String </td></tr>
<tr><td align="left" balign="left"> + getArrayAsString(array : String[]) : String </td></tr>
<tr><td align="left" balign="left"> + reverseString(string : String) : String </td></tr>
<tr><td align="left" balign="left"> + concatMatchedString(inputString : String, separator : String, regularExpression : String) : String </td></tr>
<tr><td align="left" balign="left"> + sha1(text : String) : String </td></tr>
<tr><td align="left" balign="left"> + encodeBase64(string : String) : String </td></tr>
<tr><td align="left" balign="left"> + decodeBase64(string : String) : String </td></tr>
<tr><td align="left" balign="left"> + overlap(start1 : int, end1 : int, start2 : int, end2 : int) : boolean </td></tr>
<tr><td align="left" balign="left"> + main(args : String[]) </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
	// tud.iir.helper.MathHelper
	c4192 [label=<<table title="tud.iir.helper.MathHelper" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./MathHelper.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> MathHelper </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + round(number : double, digits : int) : double </td></tr>
<tr><td align="left" balign="left"> + getPower(numberString : String) : int </td></tr>
<tr><td align="left" balign="left"> + isWithinMargin(value1 : double, value2 : double, margin : double) : boolean </td></tr>
<tr><td align="left" balign="left"> + isWithinCorrectnessMargin(questionedValue : double, correctValue : double, correctnessMargin : double) : boolean </td></tr>
<tr><td align="left" balign="left"> + faculty(number : int) : int </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
	// tud.iir.helper.LoggerMessage
	c4193 [label=<<table title="tud.iir.helper.LoggerMessage" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./LoggerMessage.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> LoggerMessage </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - loggerName : String </td></tr>
<tr><td align="left" balign="left"> - message : String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getLoggerName() : String </td></tr>
<tr><td align="left" balign="left"> + setLoggerName(loggerName : String) </td></tr>
<tr><td align="left" balign="left"> + getMessage() : String </td></tr>
<tr><td align="left" balign="left"> + getMessage(addBreak : boolean) : String </td></tr>
<tr><td align="left" balign="left"> + setMessage(message : String) </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
	// tud.iir.helper.Logger
	c4194 [label=<<table title="tud.iir.helper.Logger" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Logger.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Logger </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - MAX_LOGLINES : int </td></tr>
<tr><td align="left" balign="left"> - name : String </td></tr>
<tr><td align="left" balign="left"> - log : StringBuilder </td></tr>
<tr><td align="left" balign="left"> - active : boolean </td></tr>
<tr><td align="left" balign="left"> - silent : boolean </td></tr>
<tr><td align="left" balign="left"> - showLogInConsole : boolean </td></tr>
<tr><td align="left" balign="left"> - useDate : boolean </td></tr>
<tr><td align="left" balign="left"> - useLogHeader : boolean </td></tr>
<tr><td align="left" balign="left"> - startTime : long </td></tr>
<tr><td align="left" balign="left"> - absoluteStartTime : long </td></tr>
<tr><td align="left" balign="left"> - instance : Logger </td></tr>
<tr><td align="left" balign="left"> - errorLoggerInstance : Logger </td></tr>
<tr><td align="left" balign="left"> - numberOfLines : int </td></tr>
<tr><td align="left" balign="left"> - tempFileNumber : int </td></tr>
<tr><td align="left" balign="left"> - logDir : String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getInstance() : Logger </td></tr>
<tr><td align="left" balign="left"> + getErrorLoggerInstance_() : Logger </td></tr>
<tr><td align="left" balign="left"> - init() </td></tr>
<tr><td align="left" balign="left"> + getName() : String </td></tr>
<tr><td align="left" balign="left"> + setName(name : String) </td></tr>
<tr><td align="left" balign="left"> + isShowLogInConsole() : boolean </td></tr>
<tr><td align="left" balign="left"> + setShowLogInConsole(showLogInConsole : boolean) </td></tr>
<tr><td align="left" balign="left"> + resetStartTime() </td></tr>
<tr><td align="left" balign="left"> + resetAbsoluteStartTime() </td></tr>
<tr><td align="left" balign="left"> + reset() </td></tr>
<tr><td align="left" balign="left"> + log(message : String) </td></tr>
<tr><td align="left" balign="left"> + log(message : String, show : boolean) </td></tr>
<tr><td align="left" balign="left"> + logInline(message : String) </td></tr>
<tr><td align="left" balign="left"> + log(message : String, show : boolean, lineBreak : boolean) </td></tr>
<tr><td align="left" balign="left"> - writeTempLogs() </td></tr>
<tr><td align="left" balign="left"> + logError(cause : String, e : Throwable) </td></tr>
<tr><td align="left" balign="left"> + clearLogs() </td></tr>
<tr><td align="left" balign="left"> + getDateString(format : String) : String </td></tr>
<tr><td align="left" balign="left"> - useDate() : boolean </td></tr>
<tr><td align="left" balign="left"> + setUseDate(use : boolean) </td></tr>
<tr><td align="left" balign="left"> - useLogHeader() : boolean </td></tr>
<tr><td align="left" balign="left"> + setUseLogHeader(use : boolean) </td></tr>
<tr><td align="left" balign="left"> + isSilent() : boolean </td></tr>
<tr><td align="left" balign="left"> + setSilent(silent : boolean) </td></tr>
<tr><td align="left" balign="left"> + isActive() : boolean </td></tr>
<tr><td align="left" balign="left"> + setActive(active : boolean) </td></tr>
<tr><td align="left" balign="left"> + getRuntime(splitUp : boolean) : String </td></tr>
<tr><td align="left" balign="left"> + getTotalRuntime() : int </td></tr>
<tr><td align="left" balign="left"> + saveLogs() </td></tr>
<tr><td align="left" balign="left"> + saveLogs(path : String, useDate : boolean) </td></tr>
<tr><td align="left" balign="left"> + saveLogs(path : String) </td></tr>
<tr><td align="left" balign="left"> + getExcerpt(numberOfLines : int) : StringBuilder </td></tr>
<tr><td align="left" balign="left"> + getLogDir() : String </td></tr>
<tr><td align="left" balign="left"> + setLogDir(logDir : String) </td></tr>
<tr><td align="left" balign="left"> + getLogs() : StringBuilder </td></tr>
<tr><td align="left" balign="left"> + addLogs(logs : StringBuilder) </td></tr>
<tr><td align="left" balign="left"> + main(abc : String[]) </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
	// tud.iir.helper.LineAction
	c4195 [label=<<table title="tud.iir.helper.LineAction" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./LineAction.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="ariali"> LineAction </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # looping : boolean </td></tr>
<tr><td align="left" balign="left"> + arguments : Object[] </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"><font face="ariali" point-size="10.0"> + performAction(line : String, lineNumber : int) </font></td></tr>
<tr><td align="left" balign="left"> + breakLineLoop() </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
	// tud.iir.helper.FileHelper
	c4196 [label=<<table title="tud.iir.helper.FileHelper" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./FileHelper.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> FileHelper </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - logger : Logger </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + isFileName(name : String) : boolean </td></tr>
<tr><td align="left" balign="left"> + isVideoFile(fileType : String) : boolean </td></tr>
<tr><td align="left" balign="left"> + isAudioFile(fileType : String) : boolean </td></tr>
<tr><td align="left" balign="left"> + getFileName(path : String) : String </td></tr>
<tr><td align="left" balign="left"> + getFileType(path : String) : String </td></tr>
<tr><td align="left" balign="left"> + readHTMLFileToString(path : String, stripTags : boolean) : String </td></tr>
<tr><td align="left" balign="left"> + readFileToString(path : String) : String </td></tr>
<tr><td align="left" balign="left"> + readFileToArray(path : String) : ArrayList&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + performActionOnEveryLine(filePath : String, la : LineAction) : int </td></tr>
<tr><td align="left" balign="left"> + writeToFile(filePath : String, string : StringBuilder) </td></tr>
<tr><td align="left" balign="left"> + writeToFile(filePath : String, string : String) </td></tr>
<tr><td align="left" balign="left"> + appendToFile(filePath : String, string : StringBuilder, before : boolean) </td></tr>
<tr><td align="left" balign="left"> + deserialize(filePath : String) : Object </td></tr>
<tr><td align="left" balign="left"> + serialize(obj : Object, filePath : String) </td></tr>
<tr><td align="left" balign="left"> + rename(inputFile : File, newName : String) : String </td></tr>
<tr><td align="left" balign="left"> + copyFile(sourceFile : String, destinationFile : String) </td></tr>
<tr><td align="left" balign="left"> + copyDirectory(srcPath : String, dstPath : String) </td></tr>
<tr><td align="left" balign="left"> + copyDirectory(srcPath : File, dstPath : File) </td></tr>
<tr><td align="left" balign="left"> + delete(filename : String, deleteNonEmptyDirectory : boolean) : boolean </td></tr>
<tr><td align="left" balign="left"> + delete(filename : String) : boolean </td></tr>
<tr><td align="left" balign="left"> + move(file : File, newPath : String) : boolean </td></tr>
<tr><td align="left" balign="left"> + addFileHeader(folderPath : String, header : StringBuilder) </td></tr>
<tr><td align="left" balign="left"> + getFiles(folderPath : String) : File[] </td></tr>
<tr><td align="left" balign="left"> + getFiles(folderPath : String, substring : String) : File[] </td></tr>
<tr><td align="left" balign="left"> + getNumberOfLines(fileName : String) : int </td></tr>
<tr><td align="left" balign="left"> + zip(text : String, filenameOutput : String) : boolean </td></tr>
<tr><td align="left" balign="left"> + zipString(text : String) : String </td></tr>
<tr><td align="left" balign="left"> + unzipFile(filenameInput : String, filenameOutput : String) </td></tr>
<tr><td align="left" balign="left"> + unzipFile(filenameInput : String) </td></tr>
<tr><td align="left" balign="left"> + unzipFile7z(filenameInput : String) </td></tr>
<tr><td align="left" balign="left"> + unzipFileCmd(filenameInput : String, consoleCommand : String) </td></tr>
<tr><td align="left" balign="left"> + unzipFileToString(filename : String) : String </td></tr>
<tr><td align="left" balign="left"> + unzipInputStreamToString(in : InputStream) : String </td></tr>
<tr><td align="left" balign="left"> + fileExists(filePath : String) : boolean </td></tr>
<tr><td align="left" balign="left"> + main(a : String[]) </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
	// tud.iir.helper.DBStore
	c4197 [label=<<table title="tud.iir.helper.DBStore" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./DBStore.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> DBStore </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # logger : Logger </td></tr>
<tr><td align="left" balign="left"> - connection : Connection </td></tr>
<tr><td align="left" balign="left"> - dbType : String </td></tr>
<tr><td align="left" balign="left"> - dbDriver : String </td></tr>
<tr><td align="left" balign="left"> - dbHost : String </td></tr>
<tr><td align="left" balign="left"> - dbPort : String </td></tr>
<tr><td align="left" balign="left"> - dbName : String </td></tr>
<tr><td align="left" balign="left"> - tableName : String </td></tr>
<tr><td align="left" balign="left"> - dbUsername : String </td></tr>
<tr><td align="left" balign="left"> - dbPassword : String </td></tr>
<tr><td align="left" balign="left"> - psLastInsertID : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psGetByKey : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psGetByValue : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psKeyExists : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psInsertTuple : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psUpdateTuple : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psRemoveTuple : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psTruncate : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - size : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - getConnection() : Connection </td></tr>
<tr><td align="left" balign="left"> - runUpdate(preparedStatement : PreparedStatement) : int </td></tr>
<tr><td align="left" balign="left"> - runQueryID(statement : PreparedStatement) : int </td></tr>
<tr><td align="left" balign="left"> - runQuery(statement : PreparedStatement) : ResultSet </td></tr>
<tr><td align="left" balign="left"> + clear() </td></tr>
<tr><td align="left" balign="left"> + get(key : String) : Object </td></tr>
<tr><td align="left" balign="left"> + getByKey(key : String) : Object </td></tr>
<tr><td align="left" balign="left"> + put(key : String, value : int) </td></tr>
<tr><td align="left" balign="left"> + put(key : String, value : double) </td></tr>
<tr><td align="left" balign="left"> + put(key : String, value : String) </td></tr>
<tr><td align="left" balign="left"> + remove(key : String) </td></tr>
<tr><td align="left" balign="left"> - keyExists(key : String) : boolean </td></tr>
<tr><td align="left" balign="left"> + getDbType() : String </td></tr>
<tr><td align="left" balign="left"> + setDbType(dbType : String) </td></tr>
<tr><td align="left" balign="left"> + getDbDriver() : String </td></tr>
<tr><td align="left" balign="left"> + setDbDriver(dbDriver : String) </td></tr>
<tr><td align="left" balign="left"> + getDbHost() : String </td></tr>
<tr><td align="left" balign="left"> + setDbHost(dbHost : String) </td></tr>
<tr><td align="left" balign="left"> + getDbPort() : String </td></tr>
<tr><td align="left" balign="left"> + setDbPort(dbPort : String) </td></tr>
<tr><td align="left" balign="left"> + getTableName() : String </td></tr>
<tr><td align="left" balign="left"> + setTableName(tableName : String) </td></tr>
<tr><td align="left" balign="left"> + getDbUsername() : String </td></tr>
<tr><td align="left" balign="left"> + setDbUsername(dbUsername : String) </td></tr>
<tr><td align="left" balign="left"> + getDbPassword() : String </td></tr>
<tr><td align="left" balign="left"> + setDbPassword(dbPassword : String) </td></tr>
<tr><td align="left" balign="left"> + size() : int </td></tr>
<tr><td align="left" balign="left"> + main(args : String[]) </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
	// tud.iir.helper.DateHelper
	c4198 [label=<<table title="tud.iir.helper.DateHelper" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./DateHelper.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> DateHelper </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + SECOND_MS : int </td></tr>
<tr><td align="left" balign="left"> + MINUTE_MS : int </td></tr>
<tr><td align="left" balign="left"> + HOUR_MS : int </td></tr>
<tr><td align="left" balign="left"> + DAY_MS : int </td></tr>
<tr><td align="left" balign="left"> + WEEK_MS : int </td></tr>
<tr><td align="left" balign="left"> + MONTH_MS : int </td></tr>
<tr><td align="left" balign="left"> + YEAR_MS : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + containsDate(searchString : String) : boolean </td></tr>
<tr><td align="left" balign="left"> + getCurrentDatetime(format : String) : String </td></tr>
<tr><td align="left" balign="left"> + getCurrentDatetime() : String </td></tr>
<tr><td align="left" balign="left"> + monthNameToNumber(monthName : String) : String </td></tr>
<tr><td align="left" balign="left"> + getRuntime(startTime : long) : String </td></tr>
<tr><td align="left" balign="left"> + getRuntime(startTime : long, output : boolean) : String </td></tr>
<tr><td align="left" balign="left"> + main(t : String[]) </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
	// tud.iir.helper.CollectionHelper
	c4199 [label=<<table title="tud.iir.helper.CollectionHelper" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./CollectionHelper.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> CollectionHelper </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ASCENDING : boolean </td></tr>
<tr><td align="left" balign="left"> + DESCENDING : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + sortByValue(entrySet : Set&lt;Map.Entry&lt;S, T&gt;&gt;) : LinkedHashMap&lt;S, T&gt; </td></tr>
<tr><td align="left" balign="left"> + sortByValue(entrySet : Set&lt;Map.Entry&lt;S, T&gt;&gt;, ascending : boolean) : LinkedHashMap&lt;S, T&gt; </td></tr>
<tr><td align="left" balign="left"> + reverse(list : ArrayList&lt;T&gt;) : ArrayList&lt;T&gt; </td></tr>
<tr><td align="left" balign="left"> + getPrint(array : Object[]) : String </td></tr>
<tr><td align="left" balign="left"> + getPrint(set : Set&lt;&gt;) : String </td></tr>
<tr><td align="left" balign="left"> + print(array : Object[]) </td></tr>
<tr><td align="left" balign="left"> + print(set : Set&lt;&gt;) </td></tr>
<tr><td align="left" balign="left"> + print(list : List&lt;&gt;) </td></tr>
<tr><td align="left" balign="left"> + print(map : Map&lt;&gt;) </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
}

