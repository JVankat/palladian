#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version 5.2 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="arial",fontsize=10,labelfontname="arial",labelfontsize=10];
	node [fontname="arial",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// tud.iir.helper.StringHelper
	c39832 [label=<<table title="tud.iir.helper.StringHelper" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./StringHelper.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> StringHelper </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - BRACKETS : char[] </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + makeSafeName(name : String) : String </td></tr>
<tr><td align="left" balign="left"> + makeCamelCase(name : String, uppercaseFirst : boolean, toSingular : boolean) : String </td></tr>
<tr><td align="left" balign="left"> + makeCamelCase(name : String, uppercaseFirst : boolean) : String </td></tr>
<tr><td align="left" balign="left"> + upperCaseFirstLetter(term : String) : String </td></tr>
<tr><td align="left" balign="left"> + lowerCaseFirstLetter(term : String) : String </td></tr>
<tr><td align="left" balign="left"> + calculateNGrams(string : String, n : int) : HashSet&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + removeNumbering(numberedText : String) : String </td></tr>
<tr><td align="left" balign="left"> + calculateAllNGrams(string : String, n1 : int, n2 : int) : HashSet&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + makeViewName(name : String) : String </td></tr>
<tr><td align="left" balign="left"> + containsProperNoun(searchString : String) : boolean </td></tr>
<tr><td align="left" balign="left"> + containsNumber(searchString : String) : boolean </td></tr>
<tr><td align="left" balign="left"> + wordToSingular(plural : String) : String </td></tr>
<tr><td align="left" balign="left"> + wordToPlural(singular : String) : String </td></tr>
<tr><td align="left" balign="left"> + removeStopWords(string : String) : String </td></tr>
<tr><td align="left" balign="left"> + removeHTMLTags(htmlText : String, stripTags : boolean, stripComments : boolean, stripJSAndCSS : boolean, joinTagsAndRemoveNewlines : boolean) : String </td></tr>
<tr><td align="left" balign="left"> + removeSpecialChars(string : String) : String </td></tr>
<tr><td align="left" balign="left"> + countTags(htmlText : String) : int </td></tr>
<tr><td align="left" balign="left"> + countTags(htmlText : String, distinct : boolean) : int </td></tr>
<tr><td align="left" balign="left"> + removeBrackets(string : String) : String </td></tr>
<tr><td align="left" balign="left"> + escapeForRegularExpression(string : String) : String </td></tr>
<tr><td align="left" balign="left"> + isBracket(character : char) : boolean </td></tr>
<tr><td align="left" balign="left"> + isNumber(ch : Character) : boolean </td></tr>
<tr><td align="left" balign="left"> + isNumber(string : String) : boolean </td></tr>
<tr><td align="left" balign="left"> + isNumericExpression(string : String) : boolean </td></tr>
<tr><td align="left" balign="left"> + isTimeExpression(string : String) : boolean </td></tr>
<tr><td align="left" balign="left"> + isCompletelyUppercase(string : String) : boolean </td></tr>
<tr><td align="left" balign="left"> + letterNumberCount(string : String) : int </td></tr>
<tr><td align="left" balign="left"> + capitalizedWordCount(string : String) : int </td></tr>
<tr><td align="left" balign="left"> + isVowel(character : Character) : boolean </td></tr>
<tr><td align="left" balign="left"> + getPhraseFromBeginningOfSentence(string : String) : String </td></tr>
<tr><td align="left" balign="left"> + getPhraseToEndOfSentence(string : String) : String </td></tr>
<tr><td align="left" balign="left"> + getSentence(string : String, position : int) : String </td></tr>
<tr><td align="left" balign="left"> + trim(string : String) : String </td></tr>
<tr><td align="left" balign="left"> + trim(string : String, keepCharacters : String) : String </td></tr>
<tr><td align="left" balign="left"> + trim(strings : HashSet&lt;String&gt;) : HashSet&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + makeContinuousText(text : String) : String </td></tr>
<tr><td align="left" balign="left"> + unescapeHTMLEntities(string : String) : String </td></tr>
<tr><td align="left" balign="left"> + putArticleInFront(string : String) : String </td></tr>
<tr><td align="left" balign="left"> + countWords(string : String) : int </td></tr>
<tr><td align="left" balign="left"> + calculateSimilarity(string1 : String, string2 : String) : double </td></tr>
<tr><td align="left" balign="left"> + calculateSimilarity(string1 : String, string2 : String, caseSensitive : boolean) : double </td></tr>
<tr><td align="left" balign="left"> + getLongestCommonString(string1 : String, string2 : String, caseSensitive : boolean, shiftString : boolean) : String </td></tr>
<tr><td align="left" balign="left"> + getArrayAsString(array : String[]) : String </td></tr>
<tr><td align="left" balign="left"> + reverseString(string : String) : String </td></tr>
<tr><td align="left" balign="left"> + concatMatchedString(inputString : String, separator : String, regularExpression : String) : String </td></tr>
<tr><td align="left" balign="left"> + sha1(text : String) : String </td></tr>
<tr><td align="left" balign="left"> + encodeBase64(string : String) : String </td></tr>
<tr><td align="left" balign="left"> + decodeBase64(string : String) : String </td></tr>
<tr><td align="left" balign="left"> + overlap(start1 : int, end1 : int, start2 : int, end2 : int) : boolean </td></tr>
<tr><td align="left" balign="left"> + main(args : String[]) </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
}

