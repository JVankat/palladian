#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version 5.2 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="arial",fontsize=10,labelfontname="arial",labelfontsize=10];
	node [fontname="arial",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// tud.iir.classification.Dictionary
	c9250 [label=<<table title="tud.iir.classification.Dictionary" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./Dictionary.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Dictionary </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - serialVersionUID : long </td></tr>
<tr><td align="left" balign="left"> - numberOfDocuments : int </td></tr>
<tr><td align="left" balign="left"> - name : String </td></tr>
<tr><td align="left" balign="left"> - categories : Categories </td></tr>
<tr><td align="left" balign="left"> - wcm : WordCorrelationMatrix </td></tr>
<tr><td align="left" balign="left"> + hierarchyRootNode : TreeNode </td></tr>
<tr><td align="left" balign="left"> - dictionaryIndex : DictionaryIndex </td></tr>
<tr><td align="left" balign="left"> + DB_INDEX_FAST : int </td></tr>
<tr><td align="left" balign="left"> + DB_INDEX_NORMALIZED : int </td></tr>
<tr><td align="left" balign="left"> + LUCENE_INDEX : int </td></tr>
<tr><td align="left" balign="left"> - indexType : int </td></tr>
<tr><td align="left" balign="left"> - useIndex : boolean </td></tr>
<tr><td align="left" balign="left"> - readFromIndexForUpdate : boolean </td></tr>
<tr><td align="left" balign="left"> - classType : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + useIndex(classType : int) </td></tr>
<tr><td align="left" balign="left"> + closeIndexWriter() </td></tr>
<tr><td align="left" balign="left"> + emptyIndex() </td></tr>
<tr><td align="left" balign="left"> + useMemory() </td></tr>
<tr><td align="left" balign="left"> + setMainCategories(categories : Categories) </td></tr>
<tr><td align="left" balign="left"> + updateWord(word : Term, category : Category, value : double) : CategoryEntries </td></tr>
<tr><td align="left" balign="left"> + updateWord(word : Term, categoryName : String, value : double) : CategoryEntries </td></tr>
<tr><td align="left" balign="left"> + getMostLikelyCategoryEntry(word : String, minimumScore : double) : CategoryEntry </td></tr>
<tr><td align="left" balign="left"> + getMostLikelyCategoryEntry(words : String[], minimumScore : double) : CategoryEntry </td></tr>
<tr><td align="left" balign="left"> + getCategoryEntries(word : String, minimumScore : double) : CategoryEntries </td></tr>
<tr><td align="left" balign="left"> + getCategoryEntries(words : String[]) : CategoryEntries </td></tr>
<tr><td align="left" balign="left"> + getNumberOfDocuments() : int </td></tr>
<tr><td align="left" balign="left"> + setNumberOfDocuments(numberOfDocuments : int) </td></tr>
<tr><td align="left" balign="left"> + increaseNumberOfDocuments() </td></tr>
<tr><td align="left" balign="left"> + saveAsCSV() </td></tr>
<tr><td align="left" balign="left"> + calculateCategoryPriors() </td></tr>
<tr><td align="left" balign="left"> + index(deleteIndexFirst : boolean) </td></tr>
<tr><td align="left" balign="left"> + serialize(indexPath : String, indexFirst : boolean, deleteIndexFirst : boolean) </td></tr>
<tr><td align="left" balign="left"> + get(term : Term) : CategoryEntries </td></tr>
<tr><td align="left" balign="left"> + getName() : String </td></tr>
<tr><td align="left" balign="left"> + setName(name : String) </td></tr>
<tr><td align="left" balign="left"> + getCategories() : Categories </td></tr>
<tr><td align="left" balign="left"> + setCategories(categories : Categories) </td></tr>
<tr><td align="left" balign="left"> + isReadFromIndexForUpdate() : boolean </td></tr>
<tr><td align="left" balign="left"> + setReadFromIndexForUpdate(readFromIndexForUpdate : boolean) </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + setClassType(classType : int) </td></tr>
<tr><td align="left" balign="left"> + getClassType() : int </td></tr>
<tr><td align="left" balign="left"> + setIndexType(indexType : int) </td></tr>
<tr><td align="left" balign="left"> + getIndexType() : int </td></tr>
<tr><td align="left" balign="left"> + setWcm(wcm : WordCorrelationMatrix) </td></tr>
<tr><td align="left" balign="left"> + getWcm() : WordCorrelationMatrix </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
	//tud.iir.classification.Dictionary extends java.util.HashMap<tud.iir.classification.Term, tud.iir.classification.CategoryEntries>
	c9471:p -> c9250:p [dir=back,arrowtail=empty];
	//tud.iir.classification.Dictionary implements java.io.Serializable
	c9472:p -> c9250:p [dir=back,arrowtail=empty,style=dashed];
	// java.io.Serializable
	c9472 [label=<<table title="java.io.Serializable" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="http://java.sun.com/j2se/1.4.2/docs/api/java/io/Serializable.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> java.io.Serializable </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
	// java.util.HashMap<K, V>
	c9471 [label=<<table title="java.util.HashMap" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/HashMap.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> java.util.HashMap&lt;K, V&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ DEFAULT_INITIAL_CAPACITY : int </td></tr>
<tr><td align="left" balign="left"> ~ MAXIMUM_CAPACITY : int </td></tr>
<tr><td align="left" balign="left"> ~ DEFAULT_LOAD_FACTOR : float </td></tr>
<tr><td align="left" balign="left"> ~ table : java.util.HashMap.Entry&lt;&gt;[] </td></tr>
<tr><td align="left" balign="left"> ~ size : int </td></tr>
<tr><td align="left" balign="left"> ~ threshold : int </td></tr>
<tr><td align="left" balign="left"> ~ loadFactor : float </td></tr>
<tr><td align="left" balign="left"> ~ modCount : int </td></tr>
<tr><td align="left" balign="left"> - entrySet : java.util.Set&lt;java.util.Map.Entry&lt;K, V&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> - serialVersionUID : long </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ init() </td></tr>
<tr><td align="left" balign="left"> ~ hash(arg0 : int) : int </td></tr>
<tr><td align="left" balign="left"> ~ indexFor(arg0 : int, arg1 : int) : int </td></tr>
<tr><td align="left" balign="left"> + size() : int </td></tr>
<tr><td align="left" balign="left"> + isEmpty() : boolean </td></tr>
<tr><td align="left" balign="left"> + get(arg0 : java.lang.Object) : V </td></tr>
<tr><td align="left" balign="left"> - getForNullKey() : V </td></tr>
<tr><td align="left" balign="left"> + containsKey(arg0 : java.lang.Object) : boolean </td></tr>
<tr><td align="left" balign="left"> ~ getEntry(arg0 : java.lang.Object) : java.util.HashMap.Entry&lt;K, V&gt; </td></tr>
<tr><td align="left" balign="left"> + put(arg0 : K, arg1 : V) : V </td></tr>
<tr><td align="left" balign="left"> - putForNullKey(arg0 : V) : V </td></tr>
<tr><td align="left" balign="left"> - putForCreate(arg0 : K, arg1 : V) </td></tr>
<tr><td align="left" balign="left"> - putAllForCreate(arg0 : java.util.Map&lt;?, ?&gt;) </td></tr>
<tr><td align="left" balign="left"> ~ resize(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> ~ transfer(arg0 : java.util.HashMap.Entry&lt;&gt;[]) </td></tr>
<tr><td align="left" balign="left"> + putAll(arg0 : java.util.Map&lt;?, ?&gt;) </td></tr>
<tr><td align="left" balign="left"> + remove(arg0 : java.lang.Object) : V </td></tr>
<tr><td align="left" balign="left"> ~ removeEntryForKey(arg0 : java.lang.Object) : java.util.HashMap.Entry&lt;K, V&gt; </td></tr>
<tr><td align="left" balign="left"> ~ removeMapping(arg0 : java.lang.Object) : java.util.HashMap.Entry&lt;K, V&gt; </td></tr>
<tr><td align="left" balign="left"> + clear() </td></tr>
<tr><td align="left" balign="left"> + containsValue(arg0 : java.lang.Object) : boolean </td></tr>
<tr><td align="left" balign="left"> - containsNullValue() : boolean </td></tr>
<tr><td align="left" balign="left"> + clone() : java.lang.Object </td></tr>
<tr><td align="left" balign="left"> ~ addEntry(arg0 : int, arg1 : K, arg2 : V, arg3 : int) </td></tr>
<tr><td align="left" balign="left"> ~ createEntry(arg0 : int, arg1 : K, arg2 : V, arg3 : int) </td></tr>
<tr><td align="left" balign="left"> ~ newKeyIterator() : java.util.Iterator&lt;K&gt; </td></tr>
<tr><td align="left" balign="left"> ~ newValueIterator() : java.util.Iterator&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> ~ newEntryIterator() : java.util.Iterator&lt;java.util.Map.Entry&lt;K, V&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> + keySet() : java.util.Set&lt;K&gt; </td></tr>
<tr><td align="left" balign="left"> + values() : java.util.Collection&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + entrySet() : java.util.Set&lt;java.util.Map.Entry&lt;K, V&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> - entrySet0() : java.util.Set&lt;java.util.Map.Entry&lt;K, V&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> - writeObject(arg0 : java.io.ObjectOutputStream) </td></tr>
<tr><td align="left" balign="left"> - readObject(arg0 : java.io.ObjectInputStream) </td></tr>
<tr><td align="left" balign="left"> ~ capacity() : int </td></tr>
<tr><td align="left" balign="left"> ~ loadFactor() : float </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
}

