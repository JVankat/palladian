#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version 5.2 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="arial",fontsize=10,labelfontname="arial",labelfontsize=10];
	node [fontname="arial",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// tud.iir.classification.Classifier
	c18948 [label=<<table title="tud.iir.classification.Classifier" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../Classifier.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> tud.iir.classification.Classifier </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - logger : org.apache.log4j.Logger </td></tr>
<tr><td align="left" balign="left"> - fvWekaAttributes : weka.core.FastVector </td></tr>
<tr><td align="left" balign="left"> - psFeatureStatement : java.sql.PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psClassificationStatementConcept : java.sql.PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psClassificationStatementEntity : java.sql.PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - trainingSet : weka.core.Instances </td></tr>
<tr><td align="left" balign="left"> - testingSet : weka.core.Instances </td></tr>
<tr><td align="left" balign="left"> - evaluation : weka.classifiers.Evaluation </td></tr>
<tr><td align="left" balign="left"> - discrete : boolean </td></tr>
<tr><td align="left" balign="left"> - nominalClass : boolean </td></tr>
<tr><td align="left" balign="left"> # trainingObjects : java.util.ArrayList&lt;tud.iir.classification.FeatureObject&gt; </td></tr>
<tr><td align="left" balign="left"> # testingObjects : java.util.ArrayList&lt;tud.iir.classification.FeatureObject&gt; </td></tr>
<tr><td align="left" balign="left"> + BAYES_NET : int </td></tr>
<tr><td align="left" balign="left"> + LINEAR_REGRESSION : int </td></tr>
<tr><td align="left" balign="left"> + SVM : int </td></tr>
<tr><td align="left" balign="left"> + NEURAL_NETWORK : int </td></tr>
<tr><td align="left" balign="left"> + SVM2 : int </td></tr>
<tr><td align="left" balign="left"> - chosenClassifier : int </td></tr>
<tr><td align="left" balign="left"> - classifier : weka.classifiers.Classifier </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # createWekaAttributes(featureCount : int, attributeNames : java.lang.String[]) </td></tr>
<tr><td align="left" balign="left"> + trainClassifier(filePath : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> # trainClassifier() : boolean </td></tr>
<tr><td align="left" balign="left"> + testClassifier(conceptID : int) </td></tr>
<tr><td align="left" balign="left"> - testClassifier() </td></tr>
<tr><td align="left" balign="left"> # discretize(features : java.lang.Double[]) : java.lang.Double[] </td></tr>
<tr><td align="left" balign="left"> # createInstance(features : java.lang.Double[], trainingSet : weka.core.Instances) : weka.core.Instance </td></tr>
<tr><td align="left" balign="left"> # createInstance(fvWekaAttributes : weka.core.FastVector, features : java.lang.Double[], trainingSet : weka.core.Instances) : weka.core.Instance </td></tr>
<tr><td align="left" balign="left"> + readFeatureObjects(conceptID : int, featureQuery : java.sql.PreparedStatement) : java.util.ArrayList&lt;tud.iir.classification.FeatureObject&gt; </td></tr>
<tr><td align="left" balign="left"> + readFeatureObjects(filePath : java.lang.String) : java.util.ArrayList&lt;tud.iir.classification.FeatureObject&gt; </td></tr>
<tr><td align="left" balign="left"> + getFvWekaAttributes() : weka.core.FastVector </td></tr>
<tr><td align="left" balign="left"> + setFvWekaAttributes(fvWekaAttributes : weka.core.FastVector) </td></tr>
<tr><td align="left" balign="left"> + getPsFeatureStatement() : java.sql.PreparedStatement </td></tr>
<tr><td align="left" balign="left"> + setPsFeatureStatement(psFeatureStatement : java.sql.PreparedStatement) </td></tr>
<tr><td align="left" balign="left"> + getPsClassificationStatementConcept() : java.sql.PreparedStatement </td></tr>
<tr><td align="left" balign="left"> + setPsClassificationStatementConcept(psClassificationStatement : java.sql.PreparedStatement) </td></tr>
<tr><td align="left" balign="left"> + getPsClassificationStatementEntity() : java.sql.PreparedStatement </td></tr>
<tr><td align="left" balign="left"> + setPsClassificationStatementEntity(psClassificationStatementEntity : java.sql.PreparedStatement) </td></tr>
<tr><td align="left" balign="left"> + getTrainingSet() : weka.core.Instances </td></tr>
<tr><td align="left" balign="left"> + setTrainingSet(trainingSet : weka.core.Instances) </td></tr>
<tr><td align="left" balign="left"> + isDiscrete() : boolean </td></tr>
<tr><td align="left" balign="left"> + setDiscrete(discrete : boolean) </td></tr>
<tr><td align="left" balign="left"> + getTrainingObjects() : java.util.ArrayList&lt;tud.iir.classification.FeatureObject&gt; </td></tr>
<tr><td align="left" balign="left"> + setTrainingObjects(trainingObjects : java.util.ArrayList&lt;tud.iir.classification.FeatureObject&gt;) </td></tr>
<tr><td align="left" balign="left"> + getChosenClassifier() : int </td></tr>
<tr><td align="left" balign="left"> + getChosenClassifierName() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + setChosenClassifier(chosenClassifier : int) </td></tr>
<tr><td align="left" balign="left"> + isNominalClass() : boolean </td></tr>
<tr><td align="left" balign="left"> + setNominalClass(nominalClass : boolean) </td></tr>
<tr><td align="left" balign="left"> + getClassifier() : weka.classifiers.Classifier </td></tr>
<tr><td align="left" balign="left"> + setClassifier(classifier : weka.classifiers.Classifier) </td></tr>
<tr><td align="left" balign="left"> + getEvaluation() : weka.classifiers.Evaluation </td></tr>
<tr><td align="left" balign="left"> + setEvaluation(evaluation : weka.classifiers.Evaluation) </td></tr>
<tr><td align="left" balign="left"> + getRMSE() : double </td></tr>
<tr><td align="left" balign="left"> + getFeatureCombination() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + classifyBinary(fo : tud.iir.classification.FeatureObject, output : boolean) : boolean </td></tr>
<tr><td align="left" balign="left"> + classifySoft(fo : tud.iir.classification.FeatureObject) : double[] </td></tr>
<tr><td align="left" balign="left"> + main(args : java.lang.String[]) </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
	// tud.iir.classification.snippet.SnippetClassifier
	c18990 [label=<<table title="tud.iir.classification.snippet.SnippetClassifier" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./SnippetClassifier.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> SnippetClassifier </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + classify(snippet : Snippet) : float </td></tr>
<tr><td align="left" balign="left"> + trainClassifier(conceptID : int, featureString : PreparedStatement, classificationString : PreparedStatement) : boolean </td></tr>
<tr><td align="left" balign="left"> + useTrainedClassifier() </td></tr>
<tr><td align="left" balign="left"> + main(args : String[]) </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
	//tud.iir.classification.snippet.SnippetClassifier extends tud.iir.classification.Classifier
	c18948:p -> c18990:p [dir=back,arrowtail=empty];
}

