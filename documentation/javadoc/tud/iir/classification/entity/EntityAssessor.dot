#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version 5.2 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="arial",fontsize=10,labelfontname="arial",labelfontsize=10];
	node [fontname="arial",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// tud.iir.classification.entity.WordFeatureClassifier
	c13547 [label=<<table title="tud.iir.classification.entity.WordFeatureClassifier" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./WordFeatureClassifier.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> WordFeatureClassifier </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - featureEvaluator : FeatureEvaluator </td></tr>
<tr><td align="left" balign="left"> - psGetFeatures : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - features : String[] </td></tr>
<tr><td align="left" balign="left"> - trainingEntities : HashSet&lt;Entity&gt; </td></tr>
<tr><td align="left" balign="left"> - testingEntities : HashSet&lt;Entity&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # evaluate() </td></tr>
<tr><td align="left" balign="left"> + main(args : String[]) </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
	// tud.iir.classification.entity.RandomGraphWalk
	c13549 [label=<<table title="tud.iir.classification.entity.RandomGraphWalk" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./RandomGraphWalk.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> RandomGraphWalk </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - Mxy : Array2DRowRealMatrix </td></tr>
<tr><td align="left" balign="left"> - vt : ArrayRealVector </td></tr>
<tr><td align="left" balign="left"> - v0 : ArrayRealVector </td></tr>
<tr><td align="left" balign="left"> - testingEntities : HashMap&lt;Integer, Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> - trainingEntities : HashMap&lt;Integer, Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> - trainingEntitiesSeeds : ArrayList&lt;Entity&gt; </td></tr>
<tr><td align="left" balign="left"> ~ entityMap : HashMap&lt;String, ArrayList&lt;Entity&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> ~ entityMatrixMappingInverse : HashMap&lt;Integer, Entity&gt; </td></tr>
<tr><td align="left" balign="left"> ~ idMap : HashMap&lt;String, HashMap&lt;String, HashSet&lt;Integer&gt;&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> - m : double </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - initSeedProbabilities(entities : ArrayList&lt;Entity&gt;, trainingPercentage : double, seedPercentage : double) </td></tr>
<tr><td align="left" balign="left"> - buildAdjacencyMatrix(concept : Concept, trainingPercentage : double, seedPercentage : double) </td></tr>
<tr><td align="left" balign="left"> - buildProbabilityVector(timeSteps : int) </td></tr>
<tr><td align="left" balign="left"> + evaluate() </td></tr>
<tr><td align="left" balign="left"> + matrixTest() </td></tr>
<tr><td align="left" balign="left"> + classify(entity : Entity) : boolean </td></tr>
<tr><td align="left" balign="left"> + main(args : String[]) </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
	// tud.iir.classification.entity.PMI
	c13550 [label=<<table title="tud.iir.classification.entity.PMI" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./PMI.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> PMI </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - benchmark : boolean </td></tr>
<tr><td align="left" balign="left"> - benchmarkPMIs : HashMap&lt;String, Double&gt; </td></tr>
<tr><td align="left" balign="left"> - discriminators : String[] </td></tr>
<tr><td align="left" balign="left"> - extractions : HashMap&lt;Concept, HashSet&lt;Entity&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> - classifiers : HashMap&lt;String, NBC&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + addConcept(c : Concept) </td></tr>
<tr><td align="left" balign="left"> - extract() </td></tr>
<tr><td align="left" balign="left"> - trainClassifiers(positiveEntities : Set&lt;Entity&gt;, negativeEntities : Set&lt;Entity&gt;, positiveEntitiesTuning : Set&lt;Entity&gt;, negativeEntitiesTuning : Set&lt;Entity&gt;, priorPositive : double, priorNegative : double) </td></tr>
<tr><td align="left" balign="left"> + classifySoft(entity : Entity) : Double[] </td></tr>
<tr><td align="left" balign="left"> + classify(entity : Entity) : boolean </td></tr>
<tr><td align="left" balign="left"> - findThreshold(positiveEntities : Set&lt;Entity&gt;, negativeEntities : Set&lt;Entity&gt;, concept : Concept) : double </td></tr>
<tr><td align="left" balign="left"> - calculatePMIForAllDiscriminators(entity : Entity) : double </td></tr>
<tr><td align="left" balign="left"> - calculatePMI(entity : Entity, discriminator : String) : double </td></tr>
<tr><td align="left" balign="left"> - calculatePMI(entity : Entity, discriminator : String, benchmark : boolean) : double </td></tr>
<tr><td align="left" balign="left"> - getDiscriminatorID(discriminator : String) : int </td></tr>
<tr><td align="left" balign="left"> + evaluate() </td></tr>
<tr><td align="left" balign="left"> + main(args : String[]) </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
	// tud.iir.classification.entity.EntityAssessor
	c13558 [label=<<table title="tud.iir.classification.entity.EntityAssessor" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./EntityAssessor.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="ariali"> EntityAssessor </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # logger : Logger </td></tr>
<tr><td align="left" balign="left"> # trainingPercentageStepSize : double </td></tr>
<tr><td align="left" balign="left"> # trustThresholdStepSize : double </td></tr>
<tr><td align="left" balign="left"> # dbm : DatabaseManager </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # calculateMetrics(totalRealCorrect : int, totalAssigned : int, totalCorrect : int, testSetSize : int) : ArrayList&lt;Double&gt; </td></tr>
<tr><td align="left" balign="left"> + logMetrics(concepts : HashSet&lt;Concept&gt;, evaluationMetrics : HashMap&lt;String, ArrayList&lt;Double&gt;&gt;) : ArrayList&lt;Double&gt; </td></tr>
<tr><td align="left" balign="left"> # createFlashChartLog(graphData : TreeMap&lt;Double, ArrayList&lt;Double&gt;&gt;) </td></tr>
<tr><td align="left" balign="left"><font face="ariali" point-size="10.0"> # evaluate() </font></td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
	// tud.iir.classification.entity.BCFC
	c13561 [label=<<table title="tud.iir.classification.entity.BCFC" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./BCFC.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> BCFC </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # evaluate() </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
	//tud.iir.classification.entity.WordFeatureClassifier extends tud.iir.classification.entity.EntityAssessor
	c13558:p -> c13547:p [dir=back,arrowtail=empty];
	//tud.iir.classification.entity.RandomGraphWalk extends tud.iir.classification.entity.EntityAssessor
	c13558:p -> c13549:p [dir=back,arrowtail=empty];
	//tud.iir.classification.entity.PMI extends tud.iir.classification.entity.EntityAssessor
	c13558:p -> c13550:p [dir=back,arrowtail=empty];
	//tud.iir.classification.entity.BCFC extends tud.iir.classification.entity.EntityAssessor
	c13558:p -> c13561:p [dir=back,arrowtail=empty];
}

