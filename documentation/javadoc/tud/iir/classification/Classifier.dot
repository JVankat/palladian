#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version 5.2 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="arial",fontsize=10,labelfontname="arial",labelfontsize=10];
	node [fontname="arial",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// tud.iir.classification.Classifier
	c9480 [label=<<table title="tud.iir.classification.Classifier" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./Classifier.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Classifier </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - logger : Logger </td></tr>
<tr><td align="left" balign="left"> - fvWekaAttributes : FastVector </td></tr>
<tr><td align="left" balign="left"> - psFeatureStatement : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psClassificationStatementConcept : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psClassificationStatementEntity : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - trainingSet : Instances </td></tr>
<tr><td align="left" balign="left"> - testingSet : Instances </td></tr>
<tr><td align="left" balign="left"> - evaluation : Evaluation </td></tr>
<tr><td align="left" balign="left"> - discrete : boolean </td></tr>
<tr><td align="left" balign="left"> - nominalClass : boolean </td></tr>
<tr><td align="left" balign="left"> # trainingObjects : ArrayList&lt;FeatureObject&gt; </td></tr>
<tr><td align="left" balign="left"> # testingObjects : ArrayList&lt;FeatureObject&gt; </td></tr>
<tr><td align="left" balign="left"> + BAYES_NET : int </td></tr>
<tr><td align="left" balign="left"> + LINEAR_REGRESSION : int </td></tr>
<tr><td align="left" balign="left"> + SVM : int </td></tr>
<tr><td align="left" balign="left"> + NEURAL_NETWORK : int </td></tr>
<tr><td align="left" balign="left"> + SVM2 : int </td></tr>
<tr><td align="left" balign="left"> - chosenClassifier : int </td></tr>
<tr><td align="left" balign="left"> - classifier : Classifier </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # createWekaAttributes(featureCount : int, attributeNames : String[]) </td></tr>
<tr><td align="left" balign="left"> + trainClassifier(filePath : String) </td></tr>
<tr><td align="left" balign="left"> # trainClassifier() : boolean </td></tr>
<tr><td align="left" balign="left"> + testClassifier(conceptID : int) </td></tr>
<tr><td align="left" balign="left"> - testClassifier() </td></tr>
<tr><td align="left" balign="left"> # discretize(features : Double[]) : Double[] </td></tr>
<tr><td align="left" balign="left"> # createInstance(features : Double[], trainingSet : Instances) : Instance </td></tr>
<tr><td align="left" balign="left"> # createInstance(fvWekaAttributes : FastVector, features : Double[], trainingSet : Instances) : Instance </td></tr>
<tr><td align="left" balign="left"> + readFeatureObjects(conceptID : int, featureQuery : PreparedStatement) : ArrayList&lt;FeatureObject&gt; </td></tr>
<tr><td align="left" balign="left"> + readFeatureObjects(filePath : String) : ArrayList&lt;FeatureObject&gt; </td></tr>
<tr><td align="left" balign="left"> + getFvWekaAttributes() : FastVector </td></tr>
<tr><td align="left" balign="left"> + setFvWekaAttributes(fvWekaAttributes : FastVector) </td></tr>
<tr><td align="left" balign="left"> + getPsFeatureStatement() : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> + setPsFeatureStatement(psFeatureStatement : PreparedStatement) </td></tr>
<tr><td align="left" balign="left"> + getPsClassificationStatementConcept() : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> + setPsClassificationStatementConcept(psClassificationStatement : PreparedStatement) </td></tr>
<tr><td align="left" balign="left"> + getPsClassificationStatementEntity() : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> + setPsClassificationStatementEntity(psClassificationStatementEntity : PreparedStatement) </td></tr>
<tr><td align="left" balign="left"> + getTrainingSet() : Instances </td></tr>
<tr><td align="left" balign="left"> + setTrainingSet(trainingSet : Instances) </td></tr>
<tr><td align="left" balign="left"> + isDiscrete() : boolean </td></tr>
<tr><td align="left" balign="left"> + setDiscrete(discrete : boolean) </td></tr>
<tr><td align="left" balign="left"> + getTrainingObjects() : ArrayList&lt;FeatureObject&gt; </td></tr>
<tr><td align="left" balign="left"> + setTrainingObjects(trainingObjects : ArrayList&lt;FeatureObject&gt;) </td></tr>
<tr><td align="left" balign="left"> + getChosenClassifier() : int </td></tr>
<tr><td align="left" balign="left"> + getChosenClassifierName() : String </td></tr>
<tr><td align="left" balign="left"> + setChosenClassifier(chosenClassifier : int) </td></tr>
<tr><td align="left" balign="left"> + isNominalClass() : boolean </td></tr>
<tr><td align="left" balign="left"> + setNominalClass(nominalClass : boolean) </td></tr>
<tr><td align="left" balign="left"> + getClassifier() : Classifier </td></tr>
<tr><td align="left" balign="left"> + setClassifier(classifier : Classifier) </td></tr>
<tr><td align="left" balign="left"> + getEvaluation() : Evaluation </td></tr>
<tr><td align="left" balign="left"> + setEvaluation(evaluation : Evaluation) </td></tr>
<tr><td align="left" balign="left"> + getRMSE() : double </td></tr>
<tr><td align="left" balign="left"> + getFeatureCombination() : String </td></tr>
<tr><td align="left" balign="left"> + classifyBinary(fo : FeatureObject, output : boolean) : boolean </td></tr>
<tr><td align="left" balign="left"> + classifySoft(fo : FeatureObject) : double[] </td></tr>
<tr><td align="left" balign="left"> + main(args : String[]) </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
	// tud.iir.classification.entity.EntityClassifier
	c9497 [label=<<table title="tud.iir.classification.entity.EntityClassifier" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./entity/EntityClassifier.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> tud.iir.classification.entity.EntityClassifier </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + trainClassifier(conceptID : int, featureString : java.sql.PreparedStatement) : boolean </td></tr>
<tr><td align="left" balign="left"> + trainClassifier(conceptID : int, featureString : java.sql.PreparedStatement, classificationString : java.sql.PreparedStatement) : boolean </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
	// tud.iir.classification.qa.AnswerClassifier
	c9519 [label=<<table title="tud.iir.classification.qa.AnswerClassifier" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./qa/AnswerClassifier.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> tud.iir.classification.qa.AnswerClassifier </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - featureNames : java.lang.String[] </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + useTrainedClassifier() </td></tr>
<tr><td align="left" balign="left"> + trainClassifier(dirPath : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + testClassifier(dirPath : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + rankAnswer(af : tud.iir.classification.qa.AnswerFeatures) : double </td></tr>
<tr><td align="left" balign="left"> + main(args : java.lang.String[]) </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
	// tud.iir.classification.snippet.SnippetClassifier
	c9522 [label=<<table title="tud.iir.classification.snippet.SnippetClassifier" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./snippet/SnippetClassifier.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> tud.iir.classification.snippet.SnippetClassifier </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + classify(snippet : tud.iir.knowledge.Snippet) : float </td></tr>
<tr><td align="left" balign="left"> + trainClassifier(conceptID : int, featureString : java.sql.PreparedStatement, classificationString : java.sql.PreparedStatement) : boolean </td></tr>
<tr><td align="left" balign="left"> + useTrainedClassifier() </td></tr>
<tr><td align="left" balign="left"> + main(args : java.lang.String[]) </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
	//tud.iir.classification.entity.EntityClassifier extends tud.iir.classification.Classifier
	c9480:p -> c9497:p [dir=back,arrowtail=empty];
	//tud.iir.classification.qa.AnswerClassifier extends tud.iir.classification.Classifier
	c9480:p -> c9519:p [dir=back,arrowtail=empty];
	//tud.iir.classification.snippet.SnippetClassifier extends tud.iir.classification.Classifier
	c9480:p -> c9522:p [dir=back,arrowtail=empty];
}

