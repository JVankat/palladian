#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version 5.2 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="arial",fontsize=10,labelfontname="arial",labelfontsize=10];
	node [fontname="arial",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// tud.iir.persistence.NGramAnalyzer
	c6032 [label=<<table title="tud.iir.persistence.NGramAnalyzer" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./NGramAnalyzer.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> NGramAnalyzer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + tokenStream(arg0 : String, arg1 : Reader) : TokenStream </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
	// tud.iir.persistence.PredefinedSource
	c6033 [label=<<table title="tud.iir.persistence.PredefinedSource" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./PredefinedSource.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> PredefinedSource </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - source : Source </td></tr>
<tr><td align="left" balign="left"> - conceptName : String </td></tr>
<tr><td align="left" balign="left"> - attributeNames : HashSet&lt;String&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - init(source : Source, conceptName : String) </td></tr>
<tr><td align="left" balign="left"> + getSource() : Source </td></tr>
<tr><td align="left" balign="left"> + setSource(source : Source) </td></tr>
<tr><td align="left" balign="left"> + getConceptName() : String </td></tr>
<tr><td align="left" balign="left"> + setConceptName(conceptName : String) </td></tr>
<tr><td align="left" balign="left"> + getAttributeNames() : HashSet&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + setAttributeNames(attributeNames : HashSet&lt;String&gt;) </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
	// tud.iir.persistence.PersistenceManager
	c6034 [label=<<table title="tud.iir.persistence.PersistenceManager" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./PersistenceManager.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> PersistenceManager </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + saveExtractions(knowledgeManager : KnowledgeManager) </td></tr>
<tr><td align="left" balign="left"> + cleanKnowledgeBase() </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
	// tud.iir.persistence.OntologyManager
	c6035 [label=<<table title="tud.iir.persistence.OntologyManager" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./OntologyManager.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> OntologyManager </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - instance : OntologyManager </td></tr>
<tr><td align="left" balign="left"> - ONTOLOGY_LOCATION : String </td></tr>
<tr><td align="left" balign="left"> - NAMESPACE_ONTOLOGY : String </td></tr>
<tr><td align="left" balign="left"> - ONTOLOGY_DATA_LOCATION : String </td></tr>
<tr><td align="left" balign="left"> - ONTOLOGY_DATA_CLEAN_LOCATION : String </td></tr>
<tr><td align="left" balign="left"> - SOURCES_LOCATION : String </td></tr>
<tr><td align="left" balign="left"> - NAMESPACE_SOURCES : String </td></tr>
<tr><td align="left" balign="left"> - DATA_TYPE_NAMESPACE : String </td></tr>
<tr><td align="left" balign="left"> - ONTOLOGY_LOCATION_LOCAL : String </td></tr>
<tr><td align="left" balign="left"> - ONTOLOGY_SOURCES_LOCATION_LOCAL : String </td></tr>
<tr><td align="left" balign="left"> - ONTOLOGY_DATA_LOCATION_LOCAL : String </td></tr>
<tr><td align="left" balign="left"> - ONTOLOGY_DATA_CLEAN_LOCATION_LOCAL : String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getInstance() : OntologyManager </td></tr>
<tr><td align="left" balign="left"> - readOntology(filePath : String) : OntModel </td></tr>
<tr><td align="left" balign="left"> + loadOntology() : KnowledgeManager </td></tr>
<tr><td align="left" balign="left"> + loadOntologyFile(filePath : String) : KnowledgeManager </td></tr>
<tr><td align="left" balign="left"> - findPrimaryConcept(concept : OntClass) : String </td></tr>
<tr><td align="left" balign="left"> - getAllEquivalentConcepts(concept : OntClass, equivalentConcepts : HashSet&lt;OntClass&gt;) : HashSet&lt;OntClass&gt; </td></tr>
<tr><td align="left" balign="left"> - getAllEquivalentDatatypeProperties(dp : DatatypeProperty, equivalentDatatypeProperties : HashSet&lt;String&gt;) : HashSet&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + saveExtractions(knowledgeManager : KnowledgeManager) </td></tr>
<tr><td align="left" balign="left"> + updateOntologyFile(knowledgeManager : KnowledgeManager, ontologyfile : File) </td></tr>
<tr><td align="left" balign="left"> + removeConcept(knowledgeManager : KnowledgeManager, ontologyfile : File, conceptId : int) </td></tr>
<tr><td align="left" balign="left"> + removeAttribute(knowledgeManager : KnowledgeManager, ontologyfile : File, attributeId : int) </td></tr>
<tr><td align="left" balign="left"> + jenaDBTest() </td></tr>
<tr><td align="left" balign="left"> + clearCompleteKnowledgeBase() </td></tr>
<tr><td align="left" balign="left"> + getOntModel(filePath : String) : OntModel </td></tr>
<tr><td align="left" balign="left"> + getConcepts(om : OntModel) : HashSet&lt;OntClass&gt; </td></tr>
<tr><td align="left" balign="left"> + getConceptProperties(conceptName : String, om : OntModel) : String </td></tr>
<tr><td align="left" balign="left"> + main(args : String[]) </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
	// tud.iir.persistence.IndexManager
	c6036 [label=<<table title="tud.iir.persistence.IndexManager" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./IndexManager.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> IndexManager </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - instance : IndexManager </td></tr>
<tr><td align="left" balign="left"> ~ indexWriter : IndexWriter </td></tr>
<tr><td align="left" balign="left"> - BENCHMARK_SELECTION_PATH : String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getInstance() : IndexManager </td></tr>
<tr><td align="left" balign="left"> + getIndexPath() : String </td></tr>
<tr><td align="left" balign="left"> + writeIndex(filename : String, url : String, resultID : String) </td></tr>
<tr><td align="left" balign="left"> + c() </td></tr>
<tr><td align="left" balign="left"> + getFromIndex(field : String, queryString : String) : ArrayList&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + main(args : String[]) </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
	// tud.iir.persistence.Format
	c6037 [label=<<table title="tud.iir.persistence.Format" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Format.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Format </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - concept : String </td></tr>
<tr><td align="left" balign="left"> - attribute : String </td></tr>
<tr><td align="left" balign="left"> - description : String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getConcept() : String </td></tr>
<tr><td align="left" balign="left"> + setConcept(concept : String) </td></tr>
<tr><td align="left" balign="left"> + getAttribute() : String </td></tr>
<tr><td align="left" balign="left"> + setAttribute(attribute : String) </td></tr>
<tr><td align="left" balign="left"> + getDescription() : String </td></tr>
<tr><td align="left" balign="left"> + setDescription(description : String) </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
	// tud.iir.persistence.DictionaryIndex
	c6038 [label=<<table title="tud.iir.persistence.DictionaryIndex" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./DictionaryIndex.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="ariali"> DictionaryIndex </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # logger : Logger </td></tr>
<tr><td align="left" balign="left"> # categories : Categories </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"><font face="ariali" point-size="10.0"> + write(word : String, categoryEntries : CategoryEntries) </font></td></tr>
<tr><td align="left" balign="left"><font face="ariali" point-size="10.0"> + write(word : String, categoryEntry : CategoryEntry) </font></td></tr>
<tr><td align="left" balign="left"><font face="ariali" point-size="10.0"> + update(word : String, categoryEntries : CategoryEntries) </font></td></tr>
<tr><td align="left" balign="left"><font face="ariali" point-size="10.0"> + update(word : String, categoryEntry : CategoryEntry) </font></td></tr>
<tr><td align="left" balign="left"><font face="ariali" point-size="10.0"> + read(word : String) : CategoryEntries </font></td></tr>
<tr><td align="left" balign="left"><font face="ariali" point-size="10.0"> + empty() </font></td></tr>
<tr><td align="left" balign="left"><font face="ariali" point-size="10.0"> + close() </font></td></tr>
<tr><td align="left" balign="left"><font face="ariali" point-size="10.0"> + openWriter() </font></td></tr>
<tr><td align="left" balign="left"><font face="ariali" point-size="10.0"> + openReader() : boolean </font></td></tr>
<tr><td align="left" balign="left"> + getCategories() : Categories </td></tr>
<tr><td align="left" balign="left"> + setCategories(categories : Categories) </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
	// tud.iir.persistence.DictionaryFileIndex
	c6039 [label=<<table title="tud.iir.persistence.DictionaryFileIndex" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./DictionaryFileIndex.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> DictionaryFileIndex </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - logger : Logger </td></tr>
<tr><td align="left" balign="left"> - indexPath : String </td></tr>
<tr><td align="left" balign="left"> - indexWriter : IndexWriter </td></tr>
<tr><td align="left" balign="left"> - indexSearcher : IndexSearcher </td></tr>
<tr><td align="left" balign="left"> - analyzer : NGramAnalyzer </td></tr>
<tr><td align="left" balign="left"> - queryParser : QueryParser </td></tr>
<tr><td align="left" balign="left"> - indexReader : IndexReader </td></tr>
<tr><td align="left" balign="left"> - categories : Categories </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + write(word : String, categoryEntries : CategoryEntries) </td></tr>
<tr><td align="left" balign="left"> + update(word : String, categoryEntries : CategoryEntries) </td></tr>
<tr><td align="left" balign="left"> + update(word : String, categoryEntry : CategoryEntry) </td></tr>
<tr><td align="left" balign="left"> + write(word : String, categoryEntry : CategoryEntry) </td></tr>
<tr><td align="left" balign="left"> + read(word : String) : CategoryEntries </td></tr>
<tr><td align="left" balign="left"> + empty() </td></tr>
<tr><td align="left" balign="left"> + openWriter() </td></tr>
<tr><td align="left" balign="left"> + close() </td></tr>
<tr><td align="left" balign="left"> + openReader() : boolean </td></tr>
<tr><td align="left" balign="left"> + getCategories() : Categories </td></tr>
<tr><td align="left" balign="left"> + setCategories(categories : Categories) </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
	// tud.iir.persistence.DictionaryDBIndex
	c6040 [label=<<table title="tud.iir.persistence.DictionaryDBIndex" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./DictionaryDBIndex.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> DictionaryDBIndex </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - connection : Connection </td></tr>
<tr><td align="left" balign="left"> - dbType : String </td></tr>
<tr><td align="left" balign="left"> - dbDriver : String </td></tr>
<tr><td align="left" balign="left"> - dbHost : String </td></tr>
<tr><td align="left" balign="left"> - dbPort : String </td></tr>
<tr><td align="left" balign="left"> - dbName : String </td></tr>
<tr><td align="left" balign="left"> - dbUsername : String </td></tr>
<tr><td align="left" balign="left"> - dbPassword : String </td></tr>
<tr><td align="left" balign="left"> - psRead : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psLastInsertID : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psGetWordID : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psGetCategoryID : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psInsertWord : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psInsertCategory : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psInsertTuple : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psUpdateTuple : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psGetWordCategoryTuple : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psTruncateDictionary : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psTruncateTuples : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psTruncateCategories : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psTruncateTuple2 : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psReadTuple2 : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psInsertTuple2 : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psUpdateTuple2 : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psGetWordCategoryTuple2 : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - fastMode : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - getConnection() : Connection </td></tr>
<tr><td align="left" balign="left"> - runUpdate(preparedStatement : PreparedStatement) : int </td></tr>
<tr><td align="left" balign="left"> - runQueryID(statement : PreparedStatement) : int </td></tr>
<tr><td align="left" balign="left"> - runQuery(statement : PreparedStatement) : ResultSet </td></tr>
<tr><td align="left" balign="left"> + empty() </td></tr>
<tr><td align="left" balign="left"> + read(word : String) : CategoryEntries </td></tr>
<tr><td align="left" balign="left"> + read1(word : String) : CategoryEntries </td></tr>
<tr><td align="left" balign="left"> + read3(word : String) : CategoryEntries </td></tr>
<tr><td align="left" balign="left"> + update(word : String, categoryEntries : CategoryEntries) </td></tr>
<tr><td align="left" balign="left"> + update(word : String, categoryEntry : CategoryEntry) </td></tr>
<tr><td align="left" balign="left"> - update1(word : String, categoryEntries : CategoryEntries) </td></tr>
<tr><td align="left" balign="left"> - update1(word : String, categoryEntry : CategoryEntry) </td></tr>
<tr><td align="left" balign="left"> - update3(word : String, categoryEntries : CategoryEntries) </td></tr>
<tr><td align="left" balign="left"> - update3(word : String, categoryEntry : CategoryEntry) </td></tr>
<tr><td align="left" balign="left"> + write(word : String, categoryEntries : CategoryEntries) </td></tr>
<tr><td align="left" balign="left"> + write(word : String, categoryEntry : CategoryEntry) </td></tr>
<tr><td align="left" balign="left"> - write1(word : String, categoryEntries : CategoryEntries) </td></tr>
<tr><td align="left" balign="left"> - write1(word : String, categoryEntry : CategoryEntry) </td></tr>
<tr><td align="left" balign="left"> + write3(word : String, categoryEntries : CategoryEntries) </td></tr>
<tr><td align="left" balign="left"> - write3(word : String, categoryEntry : CategoryEntry) </td></tr>
<tr><td align="left" balign="left"> + getDbType() : String </td></tr>
<tr><td align="left" balign="left"> + setDbType(dbType : String) </td></tr>
<tr><td align="left" balign="left"> + getDbDriver() : String </td></tr>
<tr><td align="left" balign="left"> + setDbDriver(dbDriver : String) </td></tr>
<tr><td align="left" balign="left"> + getDbHost() : String </td></tr>
<tr><td align="left" balign="left"> + setDbHost(dbHost : String) </td></tr>
<tr><td align="left" balign="left"> + getDbPort() : String </td></tr>
<tr><td align="left" balign="left"> + setDbPort(dbPort : String) </td></tr>
<tr><td align="left" balign="left"> + getDbName() : String </td></tr>
<tr><td align="left" balign="left"> + setDbName(dbName : String) </td></tr>
<tr><td align="left" balign="left"> + getDbUsername() : String </td></tr>
<tr><td align="left" balign="left"> + setDbUsername(dbUsername : String) </td></tr>
<tr><td align="left" balign="left"> + getDbPassword() : String </td></tr>
<tr><td align="left" balign="left"> + setDbPassword(dbPassword : String) </td></tr>
<tr><td align="left" balign="left"> + isFastMode() : boolean </td></tr>
<tr><td align="left" balign="left"> + setFastMode(fastMode : boolean) </td></tr>
<tr><td align="left" balign="left"> + close() </td></tr>
<tr><td align="left" balign="left"> + openReader() : boolean </td></tr>
<tr><td align="left" balign="left"> + openWriter() </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
	// tud.iir.persistence.DatabaseManager
	c6041 [label=<<table title="tud.iir.persistence.DatabaseManager" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./DatabaseManager.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> DatabaseManager </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - logger : Logger </td></tr>
<tr><td align="left" balign="left"> - instance : DatabaseManager </td></tr>
<tr><td align="left" balign="left"> - config : PropertiesConfiguration </td></tr>
<tr><td align="left" balign="left"> - connection : Connection </td></tr>
<tr><td align="left" balign="left"> - psConceptCheck : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psConceptSynonymCheck : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psAttributeSynonymCheck : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psAttributeConceptCheck : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psGetLastSearchedConcept : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psGetLastSearchedAttribute : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psGetLastSearchedEntity : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psInsertConcept : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psUpdateConcept : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psAttributeCheck : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psInsertAttribute : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psUpdateAttribute : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psEntityCheck : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psGetEntityName : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psInsertEntity : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psUpdateEntity : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psLoadEntities1 : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psLoadEntities2 : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psLoadEntity : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psDeleteEmptyEntities : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psGetEntityIDsByName : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psGetAttributeID : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psGetAttributeExtractedAt : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psFactCheck : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psInsertFact : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psSnippetCheck : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psInsertSnippet : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psUpdateSnippet : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psAttributeSourceCheck : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psInsertAttributeSource : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psGetEntitySources : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psEntitySourceCheck : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psInsertEntitySource : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psFactSourceCheck : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psInsertFactSource : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psSourceCheck : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psInsertSource : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psGetSourceURL : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psGetSeeds : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psLastInsertID : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psSetEntityTrust : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psInsertAssessmentInstance : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psGetEntitiesForSource : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psGetEntitiesForExtractionType : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psGetExtractionTypesForSource : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psGetSourcesForExtractionType : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psGetPMI : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psSetTestField : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psAddQ : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psAddA : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psUpdateExtractionStatus : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> - psGetExtractionStatusDownloadedBytes : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> + psGetReachableFeeds : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> + psGetInformationNeeds : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> + psCountNews : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> + psGetNewsID : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> + psInsertNews : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> + psInsertIn_News : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> + psUpdateUnreachable : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> + psUpdateUnreachable0 : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> + psUpdateMedia : PreparedStatement </td></tr>
<tr><td align="left" balign="left"> + psUpdateFeed : PreparedStatement </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getInstance() : DatabaseManager </td></tr>
<tr><td align="left" balign="left"> + getLogger() : Logger </td></tr>
<tr><td align="left" balign="left"> + getConnection() : Connection </td></tr>
<tr><td align="left" balign="left"> - closeConnection() </td></tr>
<tr><td align="left" balign="left"> + updateOntology() </td></tr>
<tr><td align="left" balign="left"> + updateOntology(filePath : String) </td></tr>
<tr><td align="left" balign="left"> + updateOntology(knowledgeManager : KnowledgeManager) </td></tr>
<tr><td align="left" balign="left"> + loadOntology() : KnowledgeManager </td></tr>
<tr><td align="left" balign="left"> + loadOntology(filePath : String) : KnowledgeManager </td></tr>
<tr><td align="left" balign="left"> + loadEntities(concept : Concept, number : int, offset : int, continueFromLastExtraction : boolean) : ArrayList&lt;Entity&gt; </td></tr>
<tr><td align="left" balign="left"> + loadEvaluationEntities(concept : Concept) : ArrayList&lt;Entity&gt; </td></tr>
<tr><td align="left" balign="left"> + loadEntity(entityID : int) : Entity </td></tr>
<tr><td align="left" balign="left"> + saveExtractions(knowledgeManager : KnowledgeManager) </td></tr>
<tr><td align="left" balign="left"> + getSeeds(concept : Concept, maxNumber : int) : ArrayList&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + getPMI(entityID : int, attributeID : int) : double </td></tr>
<tr><td align="left" balign="left"> + getBenchmarkPMIs() : HashMap&lt;String, Double&gt; </td></tr>
<tr><td align="left" balign="left"> + updateExtractionStatus(extractionPhase : int, progress : int, logExcerpt : StringBuilder, downloadedBytes : long) </td></tr>
<tr><td align="left" balign="left"> + getExtractionStatusDownloadedBytes() : long </td></tr>
<tr><td align="left" balign="left"> + setTestField(entityID : int, test : boolean) </td></tr>
<tr><td align="left" balign="left"> + getEntitiesForSource(sourceID : int) : HashSet&lt;Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + getEntitiesForExtractionType(extractionType : int, concept : Concept) : HashSet&lt;Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + getExtractionTypesForSource(sourceID : int, concept : Concept) : HashSet&lt;Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + getSourcesForExtractionType(extractionType : int, concept : Concept) : HashSet&lt;Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + addQAs(qas : ArrayList&lt;QA&gt;) </td></tr>
<tr><td align="left" balign="left"> - addConcept(concept : Concept) : int </td></tr>
<tr><td align="left" balign="left"> - addConceptSynonym(conceptID1 : int, conceptID2 : int) : int </td></tr>
<tr><td align="left" balign="left"> - addAttribute(attribute : Attribute, conceptID : int) : int </td></tr>
<tr><td align="left" balign="left"> + addAttributeSynonym(attributeID1 : int, attributeID2 : int, trust : double) : int </td></tr>
<tr><td align="left" balign="left"> + calculateAttributeSynonymTrust(attribute1 : Attribute, attribute2 : Attribute) : double </td></tr>
<tr><td align="left" balign="left"> + getEntityName(entityID : int) : String </td></tr>
<tr><td align="left" balign="left"> + getEntityIDsByName(entityName : String) : HashSet&lt;Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + addAssessmentInstance(conceptID : int, entityID : int, classValue : int) </td></tr>
<tr><td align="left" balign="left"> - addEntity(entity : Entity, conceptID : int) : int </td></tr>
<tr><td align="left" balign="left"> - addSnippet(snippet : Snippet) : int </td></tr>
<tr><td align="left" balign="left"> + addFact(factValue : FactValue, entityID : int, attributeID : int) : int </td></tr>
<tr><td align="left" balign="left"> - addAttributeSource(source : Source, attributeID : int) : int </td></tr>
<tr><td align="left" balign="left"> - addFactSource(source : Source, factID : int) : int </td></tr>
<tr><td align="left" balign="left"> - addEntitySource(source : Source, entityID : int) : int </td></tr>
<tr><td align="left" balign="left"> - addSource(source : Source) : int </td></tr>
<tr><td align="left" balign="left"> + getSourceURL(sourceID : int) : String </td></tr>
<tr><td align="left" balign="left"> - entryExists_(entry : String, table : String, field : String) : int </td></tr>
<tr><td align="left" balign="left"> - entryExists_(id1 : int, id2 : int, table : String, field1 : String, field2 : String) : int </td></tr>
<tr><td align="left" balign="left"> - entryExists(statement : PreparedStatement) : int </td></tr>
<tr><td align="left" balign="left"> + getLastInsertID() : int </td></tr>
<tr><td align="left" balign="left"> + getConceptID(conceptName : String) : int </td></tr>
<tr><td align="left" balign="left"> - getAttributeID(attributeName : String) : int </td></tr>
<tr><td align="left" balign="left"> - getSourceID(sourceURL : String) : int </td></tr>
<tr><td align="left" balign="left"> - getAttributeExtractedAt(attributeName : String) : String </td></tr>
<tr><td align="left" balign="left"> + getTotalConceptsNumber() : int </td></tr>
<tr><td align="left" balign="left"> + getTotalAttributesNumber() : int </td></tr>
<tr><td align="left" balign="left"> + getTotalEntitiesNumber() : int </td></tr>
<tr><td align="left" balign="left"> + getTotalEntitiesNumber(conceptName : String) : int </td></tr>
<tr><td align="left" balign="left"> + getTotalFactsNumber() : int </td></tr>
<tr><td align="left" balign="left"> + getTotalFactsNumber(conceptName : String) : int </td></tr>
<tr><td align="left" balign="left"> + getTotalSourcesNumber() : int </td></tr>
<tr><td align="left" balign="left"> + runQuery(query : String) : ResultSet </td></tr>
<tr><td align="left" balign="left"> + runQuery(statement : PreparedStatement) : ResultSet </td></tr>
<tr><td align="left" balign="left"> + runQuery(query : String, text : String) : ResultSet </td></tr>
<tr><td align="left" balign="left"> + runQuery(query : String, texts : String[]) : ResultSet </td></tr>
<tr><td align="left" balign="left"> + runUpdate(preparedStatement : PreparedStatement) : int </td></tr>
<tr><td align="left" balign="left"> + runUpdate(update : String) : int </td></tr>
<tr><td align="left" balign="left"> + runUpdate(update : String, text : String) : int </td></tr>
<tr><td align="left" balign="left"> + runUpdate(update : String, texts : String[]) : int </td></tr>
<tr><td align="left" balign="left"> - getLastSearched(name : String, table : String) : String </td></tr>
<tr><td align="left" balign="left"> + cleanUnusedOntologyElements() </td></tr>
<tr><td align="left" balign="left"> + clearCompleteDatabase() </td></tr>
<tr><td align="left" balign="left"> + testProcedure() </td></tr>
<tr><td align="left" balign="left"> - getWorstIndices() </td></tr>
<tr><td align="left" balign="left"> + main(args : String[]) </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
	// tud.iir.persistence.ConfigFileManager
	c6042 [label=<<table title="tud.iir.persistence.ConfigFileManager" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./ConfigFileManager.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ConfigFileManager </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - FORMATS_FILE : String </td></tr>
<tr><td align="left" balign="left"> - SOURCES_FILE : String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getFormats() : ArrayList&lt;Format&gt; </td></tr>
<tr><td align="left" balign="left"> + getPredefinedSources(knowledgeManager : KnowledgeManager) : ArrayList&lt;PredefinedSource&gt; </td></tr>
<tr><td align="left" balign="left"> + main(args : String[]) </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
	//tud.iir.persistence.DictionaryFileIndex extends tud.iir.persistence.DictionaryIndex
	c6038:p -> c6039:p [dir=back,arrowtail=empty];
	//tud.iir.persistence.DictionaryDBIndex extends tud.iir.persistence.DictionaryIndex
	c6038:p -> c6040:p [dir=back,arrowtail=empty];
}

