#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version 5.2 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="arial",fontsize=10,labelfontname="arial",labelfontsize=10];
	node [fontname="arial",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// tud.iir.extraction.XPathSet
	c2079 [label=<<table title="tud.iir.extraction.XPathSet" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./XPathSet.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> XPathSet </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - xPathMap : LinkedHashMap&lt;String, Integer&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getXPathMap() : LinkedHashMap&lt;String, Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + add(xPath : String) </td></tr>
<tr><td align="left" balign="left"> + addEntry(entry : Map.Entry&lt;String, Integer&gt;) </td></tr>
<tr><td align="left" balign="left"> + getCountOfXPath(xPath : String) : int </td></tr>
<tr><td align="left" balign="left"> + getHighestCountXPath() : String </td></tr>
<tr><td align="left" balign="left"> + getHighestCountXPath(minCount : int) : String </td></tr>
<tr><td align="left" balign="left"> + getLongestHighCountXPath(document : Document) : String </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
	// tud.iir.extraction.Query
	c2080 [label=<<table title="tud.iir.extraction.Query" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Query.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="ariali"> Query </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # querySet : String[] </td></tr>
<tr><td align="left" balign="left"> # queryType : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getQueryType() : int </td></tr>
<tr><td align="left" balign="left"> + setQueryType(queryType : int) </td></tr>
<tr><td align="left" balign="left"> + getQuerySet() : String[] </td></tr>
<tr><td align="left" balign="left"> + setQuerySet(querySet : String[]) </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
	// tud.iir.extraction.PageAnalyzer
	c2081 [label=<<table title="tud.iir.extraction.PageAnalyzer" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./PageAnalyzer.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> PageAnalyzer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - document : Document </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - getDocument() : Document </td></tr>
<tr><td align="left" balign="left"> + setDocument(document : Document) </td></tr>
<tr><td align="left" balign="left"> + setDocument(url : String) </td></tr>
<tr><td align="left" balign="left"> + getTitle() : String </td></tr>
<tr><td align="left" balign="left"> + getDocumentAsString() : String </td></tr>
<tr><td align="left" balign="left"> + getDocumentTextDump() : String </td></tr>
<tr><td align="left" balign="left"> + getDocumentTextDump(document : Document) : String </td></tr>
<tr><td align="left" balign="left"> + detectFactTable() : String[] </td></tr>
<tr><td align="left" balign="left"> - getXPathSet() : XPathSet </td></tr>
<tr><td align="left" balign="left"> + constructAllXPaths(keyword : String) : LinkedHashSet&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + constructAllXPaths(document : Document, keyword : String) : LinkedHashSet&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + constructAllXPaths(keyword : String, deleteAllIndices : boolean, wordMatch : boolean) : LinkedHashSet&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + constructAllXPaths(document : Document, keyword : String, deleteAllIndices : boolean, wordMatch : boolean) : LinkedHashSet&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + keepXPathPointingTo(xPaths : LinkedHashSet&lt;String&gt;, targetNodes : String[]) : LinkedHashSet&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + makeMutualXPath(xPathSet : HashSet&lt;String&gt;) : String </td></tr>
<tr><td align="left" balign="left"> - visit(node : Node, keyword : String, wordMatch : boolean, xpaths : LinkedHashSet&lt;String&gt;) : LinkedHashSet&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + constructXPath(node : Node) : String </td></tr>
<tr><td align="left" balign="left"> + nodeInTable(xPath : String, lookBack : int) : boolean </td></tr>
<tr><td align="left" balign="left"> + getTableCellPath(xPath : String) : String </td></tr>
<tr><td align="left" balign="left"> + getTargetNode(xpath : String) : String </td></tr>
<tr><td align="left" balign="left"> + nodeInBox(xPath : String, lookBack : int) : boolean </td></tr>
<tr><td align="left" balign="left"> + findLastBoxSection(xPath : String) : String </td></tr>
<tr><td align="left" balign="left"> + getNextSibling(xPath : String) : String </td></tr>
<tr><td align="left" balign="left"> + getNextSibling(xPath : String, tableCellSibling : boolean) : String </td></tr>
<tr><td align="left" balign="left"> + getNextTableCell(xPath : String) : String </td></tr>
<tr><td align="left" balign="left"> + getFirstTableCell(xPath : String) : String </td></tr>
<tr><td align="left" balign="left"> + getNumberOfTableRows(attributeXPath : String) : int </td></tr>
<tr><td align="left" balign="left"> + getTableRows(attributeXPath : String) : ArrayList&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + getTableRows(attributeXPath : String, siblingXPath : String) : ArrayList&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + getTableRows(document : Document, attributeXPath : String, siblingXPath : String) : ArrayList&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + getNextTableRow(xPath : String) : String </td></tr>
<tr><td align="left" balign="left"> + getParentNode(xPath : String) : String </td></tr>
<tr><td align="left" balign="left"> + getNumberOfTableColumns(document : Document, tableTDXPath : String) : int </td></tr>
<tr><td align="left" balign="left"> + getHTMLTextByXPath(xPath : String) : String </td></tr>
<tr><td align="left" balign="left"> + getTextByXPath(xPath : String) : String </td></tr>
<tr><td align="left" balign="left"> + getTextByXpath(document : Document, xpath : String) : String </td></tr>
<tr><td align="left" balign="left"> - getSeparatedTextContents(node : Node, currentString : StringBuilder) : StringBuilder </td></tr>
<tr><td align="left" balign="left"> - getChildHTMLContents(node : Node, currentString : String) : String </td></tr>
<tr><td align="left" balign="left"> + getTextsByXPath(xPath : String) : ArrayList&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + getTextsByXpath(document : Document, xpath : String) : ArrayList&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + removeXPathIndices(xPath : String) : String </td></tr>
<tr><td align="left" balign="left"> + removeXPathIndices(xPath : String, removeCountElements : String[]) : String </td></tr>
<tr><td align="left" balign="left"> + removeXPathIndicesNot(xPath : String, notRemoveCountElements : String[]) : String </td></tr>
<tr><td align="left" balign="left"> + printDOM(node : Node, indent : String) </td></tr>
<tr><td align="left" balign="left"> + getTextDump(node : Node) : String </td></tr>
<tr><td align="left" balign="left"> + main(args : String[]) </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
	// tud.iir.extraction.Filter
	c2082 [label=<<table title="tud.iir.extraction.Filter" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Filter.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Filter </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - instance : Filter </td></tr>
<tr><td align="left" balign="left"> + minEntityCorroboration : double </td></tr>
<tr><td align="left" balign="left"> + minFactCorroboration : double </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getInstance() : Filter </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
	// tud.iir.extraction.Extractor
	c2083 [label=<<table title="tud.iir.extraction.Extractor" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Extractor.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="ariali"> Extractor </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # WAIT_FOR_ENTITIES_TIMEOUT : int </td></tr>
<tr><td align="left" balign="left"> # MAX_EXTRACTION_THREADS : int </td></tr>
<tr><td align="left" balign="left"> # WAIT_FOR_FREE_THREAD_SLOT : int </td></tr>
<tr><td align="left" balign="left"> # knowledgeManager : KnowledgeManager </td></tr>
<tr><td align="left" balign="left"> - threadCount : int </td></tr>
<tr><td align="left" balign="left"> # extractionThreadGroup : ThreadGroup </td></tr>
<tr><td align="left" balign="left"> - stopped : boolean </td></tr>
<tr><td align="left" balign="left"> - benchmark : boolean </td></tr>
<tr><td align="left" balign="left"> - URL_BLACKLIST : String[] </td></tr>
<tr><td align="left" balign="left"> # logger : Logger </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getKnowledgeManager() : KnowledgeManager </td></tr>
<tr><td align="left" balign="left"> + setKnowledgeManager(knowledgeManager : KnowledgeManager) </td></tr>
<tr><td align="left" balign="left"> # resetThreadCount() </td></tr>
<tr><td align="left" balign="left"> + getThreadCount() : int </td></tr>
<tr><td align="left" balign="left"> + increaseThreadCount() </td></tr>
<tr><td align="left" balign="left"> + decreaseThreadCount() </td></tr>
<tr><td align="left" balign="left"> + isStopped() : boolean </td></tr>
<tr><td align="left" balign="left"> + setStopped(stopped : boolean) </td></tr>
<tr><td align="left" balign="left"> + isBenchmark() : boolean </td></tr>
<tr><td align="left" balign="left"> # isURLallowed(url : String) : boolean </td></tr>
<tr><td align="left" balign="left"> + filterURLs(urls : ArrayList&lt;String&gt;) : ArrayList&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + stopExtraction(saveResults : boolean) : boolean </td></tr>
<tr><td align="left" balign="left"><font face="ariali" point-size="10.0"> # saveExtractions(saveExtractions : boolean) </font></td></tr>
<tr><td align="left" balign="left"> + setBenchmark(benchmark : boolean) </td></tr>
<tr><td align="left" balign="left"> + getLogger() : Logger </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
	// tud.iir.extraction.ExtractionType
	c2084 [label=<<table title="tud.iir.extraction.ExtractionType" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./ExtractionType.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ExtractionType </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + UNKNOWN : int </td></tr>
<tr><td align="left" balign="left"> + USER_INPUT : int </td></tr>
<tr><td align="left" balign="left"> + FREE_TEXT_SENTENCE : int </td></tr>
<tr><td align="left" balign="left"> + STRUCTURED_PHRASE : int </td></tr>
<tr><td align="left" balign="left"> + TABLE_CELL : int </td></tr>
<tr><td align="left" balign="left"> + PATTERN_PHRASE : int </td></tr>
<tr><td align="left" balign="left"> + COLON_PHRASE : int </td></tr>
<tr><td align="left" balign="left"> + IMAGE : int </td></tr>
<tr><td align="left" balign="left"> + ENTITY_PHRASE : int </td></tr>
<tr><td align="left" balign="left"> + ENTITY_FOCUSED_CRAWL : int </td></tr>
<tr><td align="left" balign="left"> + ENTITY_SEED : int </td></tr>
<tr><td align="left" balign="left"> + initialTrust : double </td></tr>
<tr><td align="left" balign="left"> - correctExtractions : Integer[] </td></tr>
<tr><td align="left" balign="left"> - totalExtractions : Integer[] </td></tr>
<tr><td align="left" balign="left"> - correctExtractionsByType : HashMap&lt;String, HashMap&lt;Integer, Integer&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> - totalExtractionsByType : HashMap&lt;String, HashMap&lt;Integer, Integer&gt;&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getTrust(extractionType : int) : double </td></tr>
<tr><td align="left" balign="left"> + getTrust(extractionType : int, type : String) : double </td></tr>
<tr><td align="left" balign="left"> + addExtraction(extractionType : int, correct : boolean) </td></tr>
<tr><td align="left" balign="left"> + addExtractionByType(extractionType : int, type : String, correct : boolean) </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
	// tud.iir.extraction.ExtractionProcessManager
	c2085 [label=<<table title="tud.iir.extraction.ExtractionProcessManager" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./ExtractionProcessManager.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ExtractionProcessManager </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + entityExtractionIsRunning : boolean </td></tr>
<tr><td align="left" balign="left"> + factExtractionIsRunning : boolean </td></tr>
<tr><td align="left" balign="left"> + qaExtractionIsRunning : boolean </td></tr>
<tr><td align="left" balign="left"> + snippetExtractionIsRunning : boolean </td></tr>
<tr><td align="left" balign="left"> - ep : EntityExtractionProcess </td></tr>
<tr><td align="left" balign="left"> - fp : FactExtractionProcess </td></tr>
<tr><td align="left" balign="left"> - qp : QAExtractionProcess </td></tr>
<tr><td align="left" balign="left"> - sp : SnippetExtractionProcess </td></tr>
<tr><td align="left" balign="left"> - useConceptSynonyms : boolean </td></tr>
<tr><td align="left" balign="left"> - useAttributeSynonyms : boolean </td></tr>
<tr><td align="left" balign="left"> - findNewAttributesAndValues : boolean </td></tr>
<tr><td align="left" balign="left"> - continueQAExtraction : boolean </td></tr>
<tr><td align="left" balign="left"> + QUANTITY_TRUST : int </td></tr>
<tr><td align="left" balign="left"> + SOURCE_TRUST : int </td></tr>
<tr><td align="left" balign="left"> + EXTRACTION_TYPE_TRUST : int </td></tr>
<tr><td align="left" balign="left"> + COMBINED_TRUST : int </td></tr>
<tr><td align="left" balign="left"> + CROSS_TRUST : int </td></tr>
<tr><td align="left" balign="left"> - trustFormula : int </td></tr>
<tr><td align="left" balign="left"> + BENCHMARK_FULL_SET : int </td></tr>
<tr><td align="left" balign="left"> + BENCHMARK_HALF_SET : int </td></tr>
<tr><td align="left" balign="left"> - benchmarkSetSize : int </td></tr>
<tr><td align="left" balign="left"> + MICROSOFT_8 : int </td></tr>
<tr><td align="left" balign="left"> + YAHOO_8 : int </td></tr>
<tr><td align="left" balign="left"> + HAKIA_8 : int </td></tr>
<tr><td align="left" balign="left"> + GOOGLE_8 : int </td></tr>
<tr><td align="left" balign="left"> - benchmarkSet : int </td></tr>
<tr><td align="left" balign="left"> + BENCHMARK_FACT_EXTRACTION : String </td></tr>
<tr><td align="left" balign="left"> + BENCHMARK_ENTITY_EXTRACTION : String </td></tr>
<tr><td align="left" balign="left"> - benchmarkType : String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + startEntityExtraction() </td></tr>
<tr><td align="left" balign="left"> + stopEntityExtraction() : boolean </td></tr>
<tr><td align="left" balign="left"> + startFactExtraction() </td></tr>
<tr><td align="left" balign="left"> + stopFactExtraction() : boolean </td></tr>
<tr><td align="left" balign="left"> + runFactExtractionBenchmark() </td></tr>
<tr><td align="left" balign="left"> + startQAExtraction() </td></tr>
<tr><td align="left" balign="left"> + stopQAExtraction() : boolean </td></tr>
<tr><td align="left" balign="left"> + startSnippetExtraction() </td></tr>
<tr><td align="left" balign="left"> + stopSnippetExtraction() : boolean </td></tr>
<tr><td align="left" balign="left"> + startFullExtractionLoop() </td></tr>
<tr><td align="left" balign="left"> - waitingLoop(totalTimeMS : int, intervalMS : int) </td></tr>
<tr><td align="left" balign="left"> - getExtractionPhase() : int </td></tr>
<tr><td align="left" balign="left"> - getCurrentPhaseLoggerExcerpt() : StringBuilder </td></tr>
<tr><td align="left" balign="left"> + getSourceRetrievalSite() : int </td></tr>
<tr><td align="left" balign="left"> + getSourceRetrievalCount() : int </td></tr>
<tr><td align="left" balign="left"> + isUseConceptSynonyms() : boolean </td></tr>
<tr><td align="left" balign="left"> + setUseConceptSynonyms(useConceptSynonyms : boolean) </td></tr>
<tr><td align="left" balign="left"> + isUseAttributeSynonyms() : boolean </td></tr>
<tr><td align="left" balign="left"> + setUseAttributeSynonyms(useAttributeSynonyms : boolean) </td></tr>
<tr><td align="left" balign="left"> + isFindNewAttributesAndValues() : boolean </td></tr>
<tr><td align="left" balign="left"> + setFindNewAttributesAndValues(findNewAttributesAndValues : boolean) </td></tr>
<tr><td align="left" balign="left"> + isContinueQAExtraction() : boolean </td></tr>
<tr><td align="left" balign="left"> + setContinueQAExtraction(continueQAExtraction : boolean) </td></tr>
<tr><td align="left" balign="left"> + getBenchmarkSetSize() : int </td></tr>
<tr><td align="left" balign="left"> + setBenchmarkSetSize(benchmarkSetSize : int) </td></tr>
<tr><td align="left" balign="left"> + getBenchmarkSet() : int </td></tr>
<tr><td align="left" balign="left"> + setBenchmarkSet(benchmarkSet : int) </td></tr>
<tr><td align="left" balign="left"> + getBenchmarkType() : String </td></tr>
<tr><td align="left" balign="left"> + setBenchmarkType(benchmarkType : String) </td></tr>
<tr><td align="left" balign="left"> + getTrustFormula() : int </td></tr>
<tr><td align="left" balign="left"> + setTrustFormula(trustFormula : int) </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
	// tud.iir.extraction.ConceptDateComparator
	c2086 [label=<<table title="tud.iir.extraction.ConceptDateComparator" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./ConceptDateComparator.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ConceptDateComparator </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + compare(c1 : Concept, c2 : Concept) : int </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=10.0];
}

